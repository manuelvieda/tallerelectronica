
ControlParqueadero168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000554  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  000005c8  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000188  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008ad  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000480  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009a0  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000307  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000336  00000000  00000000  00002307  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  88:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initHardware>:
 * @RETURN: Void
 */
void initHardware(){

	// Deshabilitamos Interrupciones Generales
	cli();
  90:	f8 94       	cli

	// Inicializamos el modulo I2C/TWI
	I2C_Init();
  92:	0e 94 a1 00 	call	0x142	; 0x142 <I2C_Init>

	//Inicializamos los pines para la entrada de los dos pulsadores
	PORTD = 0x00;
  96:	1b b8       	out	0x0b, r1	; 11
	DDRD  = 0x00;
  98:	1a b8       	out	0x0a, r1	; 10
SD_init();

*/


}
  9a:	08 95       	ret

0000009c <main>:

//  ------------------------------------------------------------------------
//	PROGRAMA PRINCIPAL DEL SISITEMA
//  ------------------------------------------------------------------------

int main(void) {
  9c:	af 92       	push	r10
  9e:	bf 92       	push	r11
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	00 d0       	rcall	.+0      	; 0xb2 <main+0x16>
  b2:	00 d0       	rcall	.+0      	; 0xb4 <main+0x18>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	80 e9       	ldi	r24, 0x90	; 144
  ba:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	28 ec       	ldi	r18, 0xC8	; 200
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x24>


	_delay_ms(40);
	initHardware();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <initHardware>

	uint8_t EntraCarro[2] = {0x00, 0x00};
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t SaleCarro[2] = {0xff, 0xff};
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8b 83       	std	Y+3, r24	; 0x03
  d6:	8c 83       	std	Y+4, r24	; 0x04
  d8:	20 e9       	ldi	r18, 0x90	; 144
  da:	31 e0       	ldi	r19, 0x01	; 1
		_delay_ms(40);
		if(PIND&0x01){
			I2C_EscribirBytes(0x00, 0x01, 0x00, 2, EntraCarro);
			while(PIND&0x01){}
		}else if(PIND&0x02){
			I2C_EscribirBytes(0x00, 0x01, 0x00, 2, SaleCarro);
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	a9 2e       	mov	r10, r25
  e0:	b1 2c       	mov	r11, r1
  e2:	ac 0e       	add	r10, r28
  e4:	bd 1e       	adc	r11, r29
	uint8_t SaleCarro[2] = {0xff, 0xff};

	while(1){
		_delay_ms(40);
		if(PIND&0x01){
			I2C_EscribirBytes(0x00, 0x01, 0x00, 2, EntraCarro);
  e6:	6e 01       	movw	r12, r28
  e8:	08 94       	sec
  ea:	c1 1c       	adc	r12, r1
  ec:	d1 1c       	adc	r13, r1
  ee:	88 ec       	ldi	r24, 0xC8	; 200
  f0:	e8 2e       	mov	r14, r24
  f2:	f1 2c       	mov	r15, r1
  f4:	09 c0       	rjmp	.+18     	; 0x108 <main+0x6c>
  f6:	c7 01       	movw	r24, r14
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <main+0x6c>
 102:	20 e9       	ldi	r18, 0x90	; 144
 104:	31 e0       	ldi	r19, 0x01	; 1
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <main+0x5a>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	21 15       	cp	r18, r1
 10a:	31 05       	cpc	r19, r1
 10c:	a1 f7       	brne	.-24     	; 0xf6 <main+0x5a>
	uint8_t EntraCarro[2] = {0x00, 0x00};
	uint8_t SaleCarro[2] = {0xff, 0xff};

	while(1){
		_delay_ms(40);
		if(PIND&0x01){
 10e:	48 9b       	sbis	0x09, 0	; 9
 110:	0b c0       	rjmp	.+22     	; 0x128 <main+0x8c>
			I2C_EscribirBytes(0x00, 0x01, 0x00, 2, EntraCarro);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	86 01       	movw	r16, r12
 11e:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_EscribirBytes>
			while(PIND&0x01){}
 122:	48 99       	sbic	0x09, 0	; 9
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x86>
 126:	ed cf       	rjmp	.-38     	; 0x102 <main+0x66>
		}else if(PIND&0x02){
 128:	49 9b       	sbis	0x09, 1	; 9
 12a:	eb cf       	rjmp	.-42     	; 0x102 <main+0x66>
			I2C_EscribirBytes(0x00, 0x01, 0x00, 2, SaleCarro);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	22 e0       	ldi	r18, 0x02	; 2
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	85 01       	movw	r16, r10
 138:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_EscribirBytes>
			while(PIND&0x02){}
 13c:	49 99       	sbic	0x09, 1	; 9
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0xa0>
 140:	e0 cf       	rjmp	.-64     	; 0x102 <main+0x66>

00000142 <I2C_Init>:


void I2C_Init(void){

	// Iniciamos todos los registros en sus valores por defecto
	TWBR = 0x00;	// TWI Bit Rate Register
 142:	e8 eb       	ldi	r30, 0xB8	; 184
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
	TWCR = 0x00;	// TWI Control Register
 148:	10 92 bc 00 	sts	0x00BC, r1
	TWSR = 0xF8;	// TWI Status Register
 14c:	88 ef       	ldi	r24, 0xF8	; 248
 14e:	80 93 b9 00 	sts	0x00B9, r24
	TWAMR = 0x00;	// TWI Address Mask Register
 152:	10 92 bd 00 	sts	0x00BD, r1

	TWBR = I2C_TWBR;
 156:	81 e2       	ldi	r24, 0x21	; 33
 158:	80 83       	st	Z, r24
	TWAR = (I2C_ADDR<<1) | I2C_GENCAL;
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	80 93 ba 00 	sts	0x00BA, r24

	// Se inicializa como Esclavo, atento a recibir un llamado con ACK
	//TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);

}
 160:	08 95       	ret

00000162 <I2C_Enviar>:


uint8_t I2C_Enviar(uint8_t type){

	switch(type) {
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	39 f0       	breq	.+14     	; 0x174 <I2C_Enviar+0x12>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	18 f0       	brcs	.+6      	; 0x170 <I2C_Enviar+0xe>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	61 f4       	brne	.+24     	; 0x186 <I2C_Enviar+0x24>
 16e:	06 c0       	rjmp	.+12     	; 0x17c <I2C_Enviar+0x1a>
		case I2C_START:    // Send Start Condition
			TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);
 170:	84 ea       	ldi	r24, 0xA4	; 164
 172:	01 c0       	rjmp	.+2      	; 0x176 <I2C_Enviar+0x14>
			break;
			
		case I2C_DATA:     // Send Data
			TWCR = _BV(TWINT)|_BV(TWEN);
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	80 93 bc 00 	sts	0x00BC, r24
 17a:	05 c0       	rjmp	.+10     	; 0x186 <I2C_Enviar+0x24>
			break;

		case I2C_STOP:     // Send Stop Condition
			TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);
 17c:	84 e9       	ldi	r24, 0x94	; 148
 17e:	80 93 bc 00 	sts	0x00BC, r24
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
			return 0;
			break;
	}

	// Wait for TWINT flag set in TWCR Register
	while (!(TWCR & _BV(TWINT)));
 186:	80 91 bc 00 	lds	r24, 0x00BC
 18a:	87 ff       	sbrs	r24, 7
 18c:	fc cf       	rjmp	.-8      	; 0x186 <I2C_Enviar+0x24>
	// Return TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
	return (TW_STATUS);
 18e:	80 91 b9 00 	lds	r24, 0x00B9
 192:	88 7f       	andi	r24, 0xF8	; 248
}
 194:	08 95       	ret

00000196 <I2C_EscribirBytes>:


int I2C_EscribirBytes(uint8_t sla_id, uint8_t sla_addr, uint8_t sla_mem_addr, int len, uint8_t *buf){
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	f8 01       	movw	r30, r16
	uint8_t n=0;
	uint8_t I2C_TWSR;
	int bytesEscritos =0;

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));
 19c:	90 91 bc 00 	lds	r25, 0x00BC
 1a0:	9a 7b       	andi	r25, 0xBA	; 186
 1a2:	90 93 bc 00 	sts	0x00BC, r25
			case TW_MT_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	67 70       	andi	r22, 0x07	; 7
 1aa:	70 70       	andi	r23, 0x00	; 0
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	58 2f       	mov	r21, r24
 1b2:	52 95       	swap	r21
 1b4:	50 7f       	andi	r21, 0xF0	; 240
 1b6:	56 2b       	or	r21, r22
 1b8:	90 e0       	ldi	r25, 0x00	; 0
		if(n++ >= I2C_MAX_TRIES)
			return -1;
		
	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 1ba:	74 ea       	ldi	r23, 0xA4	; 164
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 1bc:	64 e8       	ldi	r22, 0x84	; 132

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));

	restart:
		if(n++ >= I2C_MAX_TRIES)
 1be:	9f 5f       	subi	r25, 0xFF	; 255
 1c0:	9b 30       	cpi	r25, 0x0B	; 11
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <I2C_EscribirBytes+0x30>
 1c4:	64 c0       	rjmp	.+200    	; 0x28e <I2C_EscribirBytes+0xf8>
			return -1;
		
	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 1c6:	70 93 bc 00 	sts	0x00BC, r23
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 1ca:	80 91 bc 00 	lds	r24, 0x00BC
 1ce:	87 ff       	sbrs	r24, 7
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <I2C_EscribirBytes+0x34>
		I2C_TWSR = TW_STATUS;
 1d2:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 1d6:	88 7f       	andi	r24, 0xF8	; 248
 1d8:	80 31       	cpi	r24, 0x10	; 16
 1da:	29 f0       	breq	.+10     	; 0x1e6 <I2C_EscribirBytes+0x50>
 1dc:	88 33       	cpi	r24, 0x38	; 56
 1de:	99 f3       	breq	.-26     	; 0x1c6 <I2C_EscribirBytes+0x30>
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <I2C_EscribirBytes+0x50>
 1e4:	54 c0       	rjmp	.+168    	; 0x28e <I2C_EscribirBytes+0xf8>
			case TW_MT_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 1e6:	50 93 bb 00 	sts	0x00BB, r21
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 1ea:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 1ee:	80 91 bc 00 	lds	r24, 0x00BC
 1f2:	87 ff       	sbrs	r24, 7
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <I2C_EscribirBytes+0x58>
		I2C_TWSR = TWSR & 0xF8;
 1f6:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 1fa:	88 7f       	andi	r24, 0xF8	; 248
 1fc:	80 32       	cpi	r24, 0x20	; 32
 1fe:	f9 f2       	breq	.-66     	; 0x1be <I2C_EscribirBytes+0x28>
 200:	88 33       	cpi	r24, 0x38	; 56
 202:	09 f3       	breq	.-62     	; 0x1c6 <I2C_EscribirBytes+0x30>
 204:	88 31       	cpi	r24, 0x18	; 24
 206:	d1 f5       	brne	.+116    	; 0x27c <I2C_EscribirBytes+0xe6>
			case TW_MT_ARB_LOST:	goto begin;		// Se perdio control del bus, se repite todo el proceso
			default:				goto error;
		}

		// Enviamos la direccion del esclavo donde desamos comenzar a escribir
		TWDR = sla_mem_addr;
 208:	40 93 bb 00 	sts	0x00BB, r20
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion de memoria del esclavo donde inicia escritura
 20c:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 210:	80 91 bc 00 	lds	r24, 0x00BC
 214:	87 ff       	sbrs	r24, 7
 216:	fc cf       	rjmp	.-8      	; 0x210 <I2C_EscribirBytes+0x7a>
		I2C_TWSR = TW_STATUS;
 218:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	80 33       	cpi	r24, 0x30	; 48
 220:	29 f0       	breq	.+10     	; 0x22c <I2C_EscribirBytes+0x96>
 222:	88 33       	cpi	r24, 0x38	; 56
 224:	81 f2       	breq	.-96     	; 0x1c6 <I2C_EscribirBytes+0x30>
 226:	88 32       	cpi	r24, 0x28	; 40
 228:	49 f5       	brne	.+82     	; 0x27c <I2C_EscribirBytes+0xe6>
 22a:	03 c0       	rjmp	.+6      	; 0x232 <I2C_EscribirBytes+0x9c>
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	1b c0       	rjmp	.+54     	; 0x268 <I2C_EscribirBytes+0xd2>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
			
			TWDR = *buf++;
			TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos el byte apuntado por buf 
 236:	64 e8       	ldi	r22, 0x84	; 132
 238:	11 c0       	rjmp	.+34     	; 0x25c <I2C_EscribirBytes+0xc6>
		}

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
			
			TWDR = *buf++;
 23a:	80 81       	ld	r24, Z
 23c:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos el byte apuntado por buf 
 240:	60 93 bc 00 	sts	0x00BC, r22
			while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 244:	80 91 bc 00 	lds	r24, 0x00BC
 248:	87 ff       	sbrs	r24, 7
 24a:	fc cf       	rjmp	.-8      	; 0x244 <I2C_EscribirBytes+0xae>
			I2C_TWSR = TW_STATUS;
 24c:	80 91 b9 00 	lds	r24, 0x00B9

			switch(I2C_TWSR){
 250:	88 7f       	andi	r24, 0xF8	; 248
 252:	88 32       	cpi	r24, 0x28	; 40
 254:	99 f4       	brne	.+38     	; 0x27c <I2C_EscribirBytes+0xe6>
		}

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
			
			TWDR = *buf++;
 256:	31 96       	adiw	r30, 0x01	; 1
			TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos el byte apuntado por buf 
			while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
			I2C_TWSR = TW_STATUS;

			switch(I2C_TWSR){
				case TW_MT_DATA_ACK:	bytesEscritos++; break;
 258:	4f 5f       	subi	r20, 0xFF	; 255
 25a:	5f 4f       	sbci	r21, 0xFF	; 255
	// Return TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
	return (TW_STATUS);
}


int I2C_EscribirBytes(uint8_t sla_id, uint8_t sla_addr, uint8_t sla_mem_addr, int len, uint8_t *buf){
 25c:	c9 01       	movw	r24, r18
 25e:	84 1b       	sub	r24, r20
 260:	95 0b       	sbc	r25, r21
			case TW_MT_ARB_LOST:	goto begin;
			default:				goto error;
		}

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
 262:	18 16       	cp	r1, r24
 264:	19 06       	cpc	r1, r25
 266:	4c f3       	brlt	.-46     	; 0x23a <I2C_EscribirBytes+0xa4>

		}

	//Enviamos condicion de STOP y retornamos el numero de bytes escritos
	quit:
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 268:	84 e9       	ldi	r24, 0x94	; 148
 26a:	80 93 bc 00 	sts	0x00BC, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 26e:	8d e0       	ldi	r24, 0x0D	; 13
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <I2C_EscribirBytes+0xda>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 274:	85 e4       	ldi	r24, 0x45	; 69
 276:	80 93 bc 00 	sts	0x00BC, r24
 27a:	0b c0       	rjmp	.+22     	; 0x292 <I2C_EscribirBytes+0xfc>

		return bytesEscritos;

	// Se genera un error, enviamos condicion de STOP para liberar bus y retornamos -1 indicando el error
	error:
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 27c:	84 e9       	ldi	r24, 0x94	; 148
 27e:	80 93 bc 00 	sts	0x00BC, r24
 282:	8d e0       	ldi	r24, 0x0D	; 13
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <I2C_EscribirBytes+0xee>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 288:	85 e4       	ldi	r24, 0x45	; 69
 28a:	80 93 bc 00 	sts	0x00BC, r24
		return -1;
 28e:	4f ef       	ldi	r20, 0xFF	; 255
 290:	5f ef       	ldi	r21, 0xFF	; 255

}
 292:	ca 01       	movw	r24, r20
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <I2C_LeerBytes>:




int I2C_LeerBytes(uint8_t sla_id, uint8_t sla_addr, uint8_t sla_mem_addr, int len, uint8_t *buf){
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	f8 01       	movw	r30, r16
	uint8_t I2C_TWSR;
	uint8_t I2C_TWCR;
	int bytesLeidos = 0;

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));
 2a0:	90 91 bc 00 	lds	r25, 0x00BC
 2a4:	9a 7b       	andi	r25, 0xBA	; 186
 2a6:	90 93 bc 00 	sts	0x00BC, r25
			default:				return -1; break;
		}


		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	67 70       	andi	r22, 0x07	; 7
 2ae:	70 70       	andi	r23, 0x00	; 0
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	98 2f       	mov	r25, r24
 2b6:	92 95       	swap	r25
 2b8:	90 7f       	andi	r25, 0xF0	; 240
 2ba:	96 2b       	or	r25, r22
			case TW_MR_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+R)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_READ;
 2bc:	79 2f       	mov	r23, r25
 2be:	71 60       	ori	r23, 0x01	; 1
 2c0:	50 e0       	ldi	r21, 0x00	; 0
			return -1;


	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 2c2:	a4 ea       	ldi	r26, 0xA4	; 164
		}


		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 2c4:	64 e8       	ldi	r22, 0x84	; 132

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));

	restart:
		if(n++ >= I2C_MAX_TRIES)
 2c6:	5f 5f       	subi	r21, 0xFF	; 255
 2c8:	5b 30       	cpi	r21, 0x0B	; 11
 2ca:	09 f4       	brne	.+2      	; 0x2ce <I2C_LeerBytes+0x34>
 2cc:	8f c0       	rjmp	.+286    	; 0x3ec <I2C_LeerBytes+0x152>
			return -1;


	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 2ce:	a0 93 bc 00 	sts	0x00BC, r26
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 2d2:	80 91 bc 00 	lds	r24, 0x00BC
 2d6:	87 ff       	sbrs	r24, 7
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <I2C_LeerBytes+0x38>
		I2C_TWSR = TW_STATUS;
 2da:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 2de:	88 7f       	andi	r24, 0xF8	; 248
 2e0:	80 31       	cpi	r24, 0x10	; 16
 2e2:	29 f0       	breq	.+10     	; 0x2ee <I2C_LeerBytes+0x54>
 2e4:	88 33       	cpi	r24, 0x38	; 56
 2e6:	99 f3       	breq	.-26     	; 0x2ce <I2C_LeerBytes+0x34>
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	09 f0       	breq	.+2      	; 0x2ee <I2C_LeerBytes+0x54>
 2ec:	7f c0       	rjmp	.+254    	; 0x3ec <I2C_LeerBytes+0x152>
			default:				return -1; break;
		}


		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 2ee:	90 93 bb 00 	sts	0x00BB, r25
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 2f2:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 2f6:	80 91 bc 00 	lds	r24, 0x00BC
 2fa:	87 ff       	sbrs	r24, 7
 2fc:	fc cf       	rjmp	.-8      	; 0x2f6 <I2C_LeerBytes+0x5c>
		I2C_TWSR = TW_STATUS;
 2fe:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 302:	88 7f       	andi	r24, 0xF8	; 248
 304:	80 32       	cpi	r24, 0x20	; 32
 306:	f9 f2       	breq	.-66     	; 0x2c6 <I2C_LeerBytes+0x2c>
 308:	88 33       	cpi	r24, 0x38	; 56
 30a:	09 f3       	breq	.-62     	; 0x2ce <I2C_LeerBytes+0x34>
 30c:	88 31       	cpi	r24, 0x18	; 24
 30e:	09 f0       	breq	.+2      	; 0x312 <I2C_LeerBytes+0x78>
 310:	64 c0       	rjmp	.+200    	; 0x3da <I2C_LeerBytes+0x140>
			case TW_MT_ARB_LOST:	goto begin;		// Se perdio control del bus, se repite todo el proceso
			default:				goto error;
		}

		// Enviamos la direccion del esclavo donde desamos comenzar a leer
		TWDR = sla_mem_addr;
 312:	40 93 bb 00 	sts	0x00BB, r20
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion de memoria del esclavo donde inicia escritura
 316:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 31a:	80 91 bc 00 	lds	r24, 0x00BC
 31e:	87 ff       	sbrs	r24, 7
 320:	fc cf       	rjmp	.-8      	; 0x31a <I2C_LeerBytes+0x80>
		I2C_TWSR = TW_STATUS;
 322:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 326:	88 7f       	andi	r24, 0xF8	; 248
 328:	80 33       	cpi	r24, 0x30	; 48
 32a:	09 f4       	brne	.+2      	; 0x32e <I2C_LeerBytes+0x94>
 32c:	4a c0       	rjmp	.+148    	; 0x3c2 <I2C_LeerBytes+0x128>
 32e:	88 33       	cpi	r24, 0x38	; 56
 330:	71 f2       	breq	.-100    	; 0x2ce <I2C_LeerBytes+0x34>
 332:	88 32       	cpi	r24, 0x28	; 40
 334:	09 f0       	breq	.+2      	; 0x338 <I2C_LeerBytes+0x9e>
 336:	51 c0       	rjmp	.+162    	; 0x3da <I2C_LeerBytes+0x140>
			default:				goto error;
		}

		// Ahora se debe cambiar de modo Master Transmission al modo Master Receiver
		// Enviamos condicion de REPEATED START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 338:	a0 93 bc 00 	sts	0x00BC, r26
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 33c:	80 91 bc 00 	lds	r24, 0x00BC
 340:	87 ff       	sbrs	r24, 7
 342:	fc cf       	rjmp	.-8      	; 0x33c <I2C_LeerBytes+0xa2>
		I2C_TWSR = TW_STATUS;
 344:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 348:	88 7f       	andi	r24, 0xF8	; 248
 34a:	80 31       	cpi	r24, 0x10	; 16
 34c:	31 f0       	breq	.+12     	; 0x35a <I2C_LeerBytes+0xc0>
 34e:	88 33       	cpi	r24, 0x38	; 56
 350:	09 f4       	brne	.+2      	; 0x354 <I2C_LeerBytes+0xba>
 352:	bd cf       	rjmp	.-134    	; 0x2ce <I2C_LeerBytes+0x34>
 354:	88 30       	cpi	r24, 0x08	; 8
 356:	09 f0       	breq	.+2      	; 0x35a <I2C_LeerBytes+0xc0>
 358:	49 c0       	rjmp	.+146    	; 0x3ec <I2C_LeerBytes+0x152>
			case TW_MR_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+R)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_READ;
 35a:	70 93 bb 00 	sts	0x00BB, r23
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para leer
 35e:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 362:	80 91 bc 00 	lds	r24, 0x00BC
 366:	87 ff       	sbrs	r24, 7
 368:	fc cf       	rjmp	.-8      	; 0x362 <I2C_LeerBytes+0xc8>
		I2C_TWSR = TW_STATUS;
 36a:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 36e:	88 7f       	andi	r24, 0xF8	; 248
 370:	80 34       	cpi	r24, 0x40	; 64
 372:	29 f0       	breq	.+10     	; 0x37e <I2C_LeerBytes+0xe4>
 374:	88 34       	cpi	r24, 0x48	; 72
 376:	29 f1       	breq	.+74     	; 0x3c2 <I2C_LeerBytes+0x128>
 378:	88 33       	cpi	r24, 0x38	; 56
 37a:	79 f5       	brne	.+94     	; 0x3da <I2C_LeerBytes+0x140>
 37c:	a8 cf       	rjmp	.-176    	; 0x2ce <I2C_LeerBytes+0x34>
 37e:	94 ec       	ldi	r25, 0xC4	; 196
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	1a c0       	rjmp	.+52     	; 0x3ba <I2C_LeerBytes+0x120>
		}

		for(I2C_TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA) ; len>0; len--){

		
			if(len==1)
 386:	21 30       	cpi	r18, 0x01	; 1
 388:	31 05       	cpc	r19, r1
 38a:	09 f4       	brne	.+2      	; 0x38e <I2C_LeerBytes+0xf4>
 38c:	94 e8       	ldi	r25, 0x84	; 132
				I2C_TWCR = _BV(TWINT) | _BV(TWEN); 	// En el ultimo byte a leer enviamos un NACK para terminar comunicacion
			
			TWCR = I2C_TWCR;
 38e:	90 93 bc 00 	sts	0x00BC, r25
			while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 392:	80 91 bc 00 	lds	r24, 0x00BC
 396:	87 ff       	sbrs	r24, 7
 398:	fc cf       	rjmp	.-8      	; 0x392 <I2C_LeerBytes+0xf8>
			I2C_TWSR = TW_STATUS;
 39a:	80 91 b9 00 	lds	r24, 0x00B9

			switch(I2C_TWSR){
 39e:	88 7f       	andi	r24, 0xF8	; 248
 3a0:	80 35       	cpi	r24, 0x50	; 80
 3a2:	21 f0       	breq	.+8      	; 0x3ac <I2C_LeerBytes+0x112>
 3a4:	88 35       	cpi	r24, 0x58	; 88
 3a6:	c9 f4       	brne	.+50     	; 0x3da <I2C_LeerBytes+0x140>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
				case TW_MR_DATA_NACK:	len=0;
				case TW_MR_DATA_ACK:	
										*buf++ = TWDR;
 3ac:	80 91 bb 00 	lds	r24, 0x00BB
 3b0:	81 93       	st	Z+, r24
										bytesLeidos++;
 3b2:	4f 5f       	subi	r20, 0xFF	; 255
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
			case TW_MR_SLA_NACK:	goto quit;		// Se recibio NACK, se reincia handshake para invocar al esclavo
			case TW_MR_ARB_LOST:	goto begin;		// Se perdio control del bus, se repite todo el proceso
			default:				goto error;
		}

		for(I2C_TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA) ; len>0; len--){
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	30 40       	sbci	r19, 0x00	; 0
 3ba:	12 16       	cp	r1, r18
 3bc:	13 06       	cpc	r1, r19
 3be:	1c f3       	brlt	.-58     	; 0x386 <I2C_LeerBytes+0xec>
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <I2C_LeerBytes+0x12c>

				
		//Enviamos condicion de STOP y retornamos el numero de bytes escritos
		// Leemos todos los bytes desde el esclavo y los almacenamos en el contenedor apuntado por buf

	quit:
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	50 e0       	ldi	r21, 0x00	; 0
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 3c6:	84 e9       	ldi	r24, 0x94	; 148
 3c8:	80 93 bc 00 	sts	0x00BC, r24
 3cc:	8d e0       	ldi	r24, 0x0D	; 13
 3ce:	8a 95       	dec	r24
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <I2C_LeerBytes+0x134>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 3d2:	85 e4       	ldi	r24, 0x45	; 69
 3d4:	80 93 bc 00 	sts	0x00BC, r24
 3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <I2C_LeerBytes+0x156>
		return bytesLeidos;

	// Se genera un error, enviamos condicion de STOP para liberar bus y retornamos -1 indicando el error
	error:
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 3da:	84 e9       	ldi	r24, 0x94	; 148
 3dc:	80 93 bc 00 	sts	0x00BC, r24
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	8a 95       	dec	r24
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <I2C_LeerBytes+0x148>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 3e6:	85 e4       	ldi	r24, 0x45	; 69
 3e8:	80 93 bc 00 	sts	0x00BC, r24
		return -1;
 3ec:	4f ef       	ldi	r20, 0xFF	; 255
 3ee:	5f ef       	ldi	r21, 0xFF	; 255
}
 3f0:	ca 01       	movw	r24, r20
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	08 95       	ret

000003f8 <atenderInterrupcio>:
	// 0x68  -> Maestro perdio control, se recibio SLA+W y se envio ACK ()
	
	static unsigned char PtrBuffTWI;

	uint8_t I2C_TWSR;
	I2C_TWSR = TW_STATUS;
 3f8:	80 91 b9 00 	lds	r24, 0x00B9

	switch(I2C_TWSR){
 3fc:	88 7f       	andi	r24, 0xF8	; 248
 3fe:	80 37       	cpi	r24, 0x70	; 112
 400:	71 f0       	breq	.+28     	; 0x41e <atenderInterrupcio+0x26>
 402:	81 37       	cpi	r24, 0x71	; 113
 404:	28 f4       	brcc	.+10     	; 0x410 <atenderInterrupcio+0x18>
 406:	80 36       	cpi	r24, 0x60	; 96
 408:	51 f0       	breq	.+20     	; 0x41e <atenderInterrupcio+0x26>
 40a:	88 36       	cpi	r24, 0x68	; 104
 40c:	61 f5       	brne	.+88     	; 0x466 <atenderInterrupcio+0x6e>
 40e:	07 c0       	rjmp	.+14     	; 0x41e <atenderInterrupcio+0x26>
 410:	80 39       	cpi	r24, 0x90	; 144
 412:	91 f0       	breq	.+36     	; 0x438 <atenderInterrupcio+0x40>
 414:	80 3a       	cpi	r24, 0xA0	; 160
 416:	21 f1       	breq	.+72     	; 0x460 <atenderInterrupcio+0x68>
 418:	80 38       	cpi	r24, 0x80	; 128
 41a:	29 f5       	brne	.+74     	; 0x466 <atenderInterrupcio+0x6e>
 41c:	0d c0       	rjmp	.+26     	; 0x438 <atenderInterrupcio+0x40>

		case TW_SR_SLA_ACK: 			// Se recibio SLA+W y se confirmo con ACK (Se recibe informacion del Maestro)
		case TW_SR_GCALL_ACK:			// Se recibio Llamado general y se respondio con ACK (Recibir informacion del Maestro)
		case TW_SR_ARB_LOST_SLA_ACK: 	// Se perdio control de bus y se selecciono como SLA+W enviando ACK(Recibe Informacion)
								// Se inicializan las variables usadas en la recepcion
								PtrBuffTWI = 0;
 41e:	10 92 00 01 	sts	0x0100, r1
								TWI_BytesRecividos = 0;
 422:	10 92 05 01 	sts	0x0105, r1
								for(uint8_t i = 0; i<I2C_BUFFER_SIZE; i++)
									TWI_Buff[i]=0x00;
 426:	10 92 01 01 	sts	0x0101, r1
 42a:	10 92 02 01 	sts	0x0102, r1
 42e:	10 92 03 01 	sts	0x0103, r1
 432:	10 92 04 01 	sts	0x0104, r1
 436:	0e c0       	rjmp	.+28     	; 0x454 <atenderInterrupcio+0x5c>
								TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE)|_BV(TWINT);
								break;

		case TW_SR_DATA_ACK: 	// Se recibio un byte y se respondio con un ACK
		case TW_SR_GCALL_DATA_ACK:	
								TWI_Buff[PtrBuffTWI++] = TWDR;
 438:	80 91 00 01 	lds	r24, 0x0100
 43c:	90 91 bb 00 	lds	r25, 0x00BB
 440:	e8 2f       	mov	r30, r24
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	ef 5f       	subi	r30, 0xFF	; 255
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	90 83       	st	Z, r25
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 00 01 	sts	0x0100, r24
								// Habilitamos TWI de nuevo. Si el buffer esta por llenarse entonces enviamos NACK,
								// de lo contrario ACK en sigueinte recepcion
								TWCR = _BV(TWEN)|_BV(TWIE)|_BV(TWINT)|(PtrBuffTWI==I2C_BUFFER_SIZE?0:_BV(TWEA));
 450:	84 30       	cpi	r24, 0x04	; 4
 452:	11 f0       	breq	.+4      	; 0x458 <atenderInterrupcio+0x60>
 454:	85 ec       	ldi	r24, 0xC5	; 197
 456:	01 c0       	rjmp	.+2      	; 0x45a <atenderInterrupcio+0x62>
 458:	85 e8       	ldi	r24, 0x85	; 133
 45a:	80 93 bc 00 	sts	0x00BC, r24
 45e:	08 95       	ret
								break;
		case TW_SR_STOP:		// Se recibnio condicion de STOP o REPEATED START (Se procesa informacionrecibida)
								
								// Colocamos Hardware I2C/TWI en estado pasivo (No responde a ningun llamado)
								TWCR = _BV(TWEN);
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	80 93 bc 00 	sts	0x00BC, r24
 466:	08 95       	ret

00000468 <SPI_init>:
void SPI_init(void){

	if(SPI_MSTR){
		// Se inicializa el microcontrolador como Maestro
		// Se configura el pin MISO como entrada; SCK, MOSI y SS como salida
		SPI_DDR &= ~_BV(SPI_MISO);
 468:	24 98       	cbi	0x04, 4	; 4
		SPI_DDR |= _BV(SPI_SS)|_BV(SPI_SCK)|_BV(SPI_MOSI);
 46a:	84 b1       	in	r24, 0x04	; 4
 46c:	8a 62       	ori	r24, 0x2A	; 42
 46e:	84 b9       	out	0x04, r24	; 4
		SPI_PORT |= _BV(SPI_SS)|_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SCK);
 470:	85 b1       	in	r24, 0x05	; 5
 472:	8a 63       	ori	r24, 0x3A	; 58
 474:	85 b9       	out	0x05, r24	; 5
		SPI_DDR |= _BV(SPI_MISO);
		SPI_PORT |= _BV(SPI_SS)|_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SCK);

	}

	SPCR = 0x00;
 476:	1c bc       	out	0x2c, r1	; 44
	SPCR |= (SPI_INT)?_BV(SPIE):0;
 478:	8c b5       	in	r24, 0x2c	; 44
 47a:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_DATA_ORDER)?_BV(DORD):0;
 47c:	8c b5       	in	r24, 0x2c	; 44
 47e:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_MSTR)?_BV(MSTR):0;
 480:	8c b5       	in	r24, 0x2c	; 44
 482:	80 61       	ori	r24, 0x10	; 16
 484:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_CPOL)?_BV(CPOL):0;
 486:	8c b5       	in	r24, 0x2c	; 44
 488:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_CHPA)?_BV(CPHA):0;
 48a:	8c b5       	in	r24, 0x2c	; 44
 48c:	8c bd       	out	0x2c, r24	; 44

	switch(SPI_SPR){
		case 16:SPCR |= _BV(SPR0);break;
		case 64:SPCR |= _BV(SPR1);break;
 48e:	8c b5       	in	r24, 0x2c	; 44
 490:	82 60       	ori	r24, 0x02	; 2
 492:	8c bd       	out	0x2c, r24	; 44
		case 128:SPCR |= _BV(SPR0)|_BV(SPR1);break;
		default:break;
	}

	SPSR = 0x00;
 494:	1d bc       	out	0x2d, r1	; 45
	SPSR |= (SPI_2X)?_BV(SPI2X):0;
 496:	8d b5       	in	r24, 0x2d	; 45
 498:	8d bd       	out	0x2d, r24	; 45

	SPCR |= _BV(SPE);
 49a:	8c b5       	in	r24, 0x2c	; 44
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	8c bd       	out	0x2c, r24	; 44

}
 4a0:	08 95       	ret

000004a2 <SPI_Enviar>:
 * @RETURN: Void
 */
void SPI_Enviar(uint8_t dato){
	
	// Se inicializa la transmision
	SPDR = dato;
 4a2:	8e bd       	out	0x2e, r24	; 46
	// Se espera a que la transmision se complete
	while(!(SPSR & _BV(SPIF)));
 4a4:	0d b4       	in	r0, 0x2d	; 45
 4a6:	07 fe       	sbrs	r0, 7
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <SPI_Enviar+0x2>
}
 4aa:	08 95       	ret

000004ac <SPI_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t SPI_Recibir(){

	// Se espera a que la transmision se complete
	while(!(SPSR & _BV(SPIF)));
 4ac:	0d b4       	in	r0, 0x2d	; 45
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <SPI_Recibir>
	return SPDR;
 4b2:	8e b5       	in	r24, 0x2e	; 46
}
 4b4:	08 95       	ret

000004b6 <USART0_init>:
 * @RETURN: Void
 */
void USART0_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSR0A = 0x20;
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x00;
 4bc:	e1 ec       	ldi	r30, 0xC1	; 193
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	10 82       	st	Z, r1
	UCSR0C = 0x06;
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	80 93 c2 00 	sts	0x00C2, r24
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRR0L=UBRRVAL;			//Parte baja del byte
 4c8:	83 e3       	ldi	r24, 0x33	; 51
 4ca:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=(UBRRVAL>>8);	//Parte alta del byte
 4ce:	10 92 c5 00 	sts	0x00C5, r1
		case 7: UCSR0C &= ~(_BV(UCSZ00));break;
		case 9: UCSR0B|= _BV(UCSZ02);break;
		default:break;
	}

	UCSR0B |= (INT_TX_COMPLETA)?_BV(TXCIE0):0;
 4d2:	80 81       	ld	r24, Z
 4d4:	80 64       	ori	r24, 0x40	; 64
 4d6:	80 83       	st	Z, r24
	UCSR0B |= (INT_RX_COMPLETA)?_BV(RXCIE0):0;
 4d8:	80 81       	ld	r24, Z
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	80 83       	st	Z, r24
		default: break;
	}

	if(NUM_STOP==2) UCSR0C |= _BV(USBS0);
	if(CLK_POL) UCSR0C |= _BV(UCPOL0);
}
 4de:	08 95       	ret

000004e0 <USART0_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART0_EnableTx(){
	UCSR0B |= _BV(TXEN0);
 4e0:	e1 ec       	ldi	r30, 0xC1	; 193
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	88 60       	ori	r24, 0x08	; 8
 4e8:	80 83       	st	Z, r24
}
 4ea:	08 95       	ret

000004ec <USART0_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART0_DisableTx(){
	UCSR0B &= ~_BV(TXEN0);
 4ec:	e1 ec       	ldi	r30, 0xC1	; 193
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	87 7f       	andi	r24, 0xF7	; 247
 4f4:	80 83       	st	Z, r24
}
 4f6:	08 95       	ret

000004f8 <USART0_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART0_EnableRx(){
	UCSR0B |= _BV(RXEN0);
 4f8:	e1 ec       	ldi	r30, 0xC1	; 193
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	80 61       	ori	r24, 0x10	; 16
 500:	80 83       	st	Z, r24
}
 502:	08 95       	ret

00000504 <USART0_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART0_DisableRx(){
 	UCSR0B &= ~_BV(RXEN0);
 504:	e1 ec       	ldi	r30, 0xC1	; 193
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	8f 7e       	andi	r24, 0xEF	; 239
 50c:	80 83       	st	Z, r24
 }
 50e:	08 95       	ret

00000510 <USART0_Enviar>:
  * @PARAMS uint8_t dato -> Dato que se desea enviar
  * @PRE:   El puerto USART0 se encuentra configurado y habilitado para el envio de mensajes+
  * @POST:  Se coloca el mensaje en el buffer de salida de la USART0
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){
 510:	98 2f       	mov	r25, r24

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 512:	80 91 c0 00 	lds	r24, 0x00C0
 516:	85 ff       	sbrs	r24, 5
 518:	fc cf       	rjmp	.-8      	; 0x512 <USART0_Enviar+0x2>

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 51a:	90 93 c6 00 	sts	0x00C6, r25

}
 51e:	08 95       	ret

00000520 <USART0_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART0_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSR0A & (1<<RXC0)) );
 520:	80 91 c0 00 	lds	r24, 0x00C0
 524:	87 ff       	sbrs	r24, 7
 526:	fc cf       	rjmp	.-8      	; 0x520 <USART0_Recibir>

	return UDR0;
 528:	80 91 c6 00 	lds	r24, 0x00C6
}
 52c:	08 95       	ret

0000052e <USART0_EnviarStrLen>:


void USART0_EnviarStrLen(int len, uint8_t *buf){
 52e:	9c 01       	movw	r18, r24
 530:	fb 01       	movw	r30, r22
 532:	0a c0       	rjmp	.+20     	; 0x548 <USART0_EnviarStrLen+0x1a>

	for (; len > 0; len--){
		USART0_Enviar(*buf++);
 534:	90 81       	ld	r25, Z
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 536:	80 91 c0 00 	lds	r24, 0x00C0
 53a:	85 ff       	sbrs	r24, 5
 53c:	fc cf       	rjmp	.-8      	; 0x536 <USART0_EnviarStrLen+0x8>


void USART0_EnviarStrLen(int len, uint8_t *buf){

	for (; len > 0; len--){
		USART0_Enviar(*buf++);
 53e:	31 96       	adiw	r30, 0x01	; 1

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 540:	90 93 c6 00 	sts	0x00C6, r25
}


void USART0_EnviarStrLen(int len, uint8_t *buf){

	for (; len > 0; len--){
 544:	21 50       	subi	r18, 0x01	; 1
 546:	30 40       	sbci	r19, 0x00	; 0
 548:	12 16       	cp	r1, r18
 54a:	13 06       	cpc	r1, r19
 54c:	9c f3       	brlt	.-26     	; 0x534 <USART0_EnviarStrLen+0x6>
		USART0_Enviar(*buf++);
	}


}
 54e:	08 95       	ret

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
