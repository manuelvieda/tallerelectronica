
ControlParqueadero644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000080  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000017e  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000ab4  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000040c  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000910  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000180  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002b3  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000035d  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_20>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_22>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  80:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <initHardware>:
 * @RETURN: Void
 */
void initHardware(){

	// Inicializamos el LCD
	LCD_init();
  88:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_init>

	// Inicializamos el Teclado Matricial
	KBR_DDR  = 0x0F; 
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	8a b9       	out	0x0a, r24	; 10
	KBR_PORT = 0x00;
  90:	1b b8       	out	0x0b, r1	; 11

	// Inicializamos Puerto Serial Sincrono (USART0) para comunicacion por modulo RF
	USART0_init();
  92:	0e 94 a7 01 	call	0x34e	; 0x34e <USART0_init>
	USART0_EnableTx();
  96:	0e 94 bf 01 	call	0x37e	; 0x37e <USART0_EnableTx>
}
  9a:	08 95       	ret

0000009c <__vector_22>:
	LCD_enviarDTA('X');LCD_esperarListo();
}


ISR(USART0_TX_vect) 
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
  c6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
}
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	7f 91       	pop	r23
  d8:	6f 91       	pop	r22
  da:	5f 91       	pop	r21
  dc:	4f 91       	pop	r20
  de:	3f 91       	pop	r19
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_20>:

/**
 *  Manejo de la interrupcion generada cuando la USART0 recibe un dato
 */
ISR(USART0_RX_vect) 
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	LCD_enviarDTA('X');LCD_esperarListo();
 10e:	88 e5       	ldi	r24, 0x58	; 88
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
 116:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

//  ------------------------------------------------------------------------
//	PROGRAMA PRINCIPAL DEL SISITEMA
//  ------------------------------------------------------------------------

int main(void) {
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	80 e9       	ldi	r24, 0x90	; 144
 144:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 146:	28 ec       	ldi	r18, 0xC8	; 200
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 152:	d9 f7       	brne	.-10     	; 0x14a <main+0xe>


	_delay_ms(40);
	initHardware();
 154:	0e 94 44 00 	call	0x88	; 0x88 <initHardware>
	sei();	// Enable the Global Interrupt Enable flag so that interrupts can be processed 
 158:	78 94       	sei

	
	LCD_linea1Pos0();LCD_esperarListo();
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
 162:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	c8 ec       	ldi	r28, 0xC8	; 200
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	28 ee       	ldi	r18, 0xE8	; 232
 16e:	33 e0       	ldi	r19, 0x03	; 3
 170:	fe 01       	movw	r30, r28
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	d1 f7       	brne	.-12     	; 0x170 <main+0x34>
 17c:	28 ee       	ldi	r18, 0xE8	; 232
 17e:	33 e0       	ldi	r19, 0x03	; 3
 180:	fe 01       	movw	r30, r28
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	21 50       	subi	r18, 0x01	; 1
 188:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	d1 f7       	brne	.-12     	; 0x180 <main+0x44>
 18c:	28 ee       	ldi	r18, 0xE8	; 232
 18e:	33 e0       	ldi	r19, 0x03	; 3
 190:	fe 01       	movw	r30, r28
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 196:	21 50       	subi	r18, 0x01	; 1
 198:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19a:	d1 f7       	brne	.-12     	; 0x190 <main+0x54>
 19c:	28 ee       	ldi	r18, 0xE8	; 232
 19e:	33 e0       	ldi	r19, 0x03	; 3
 1a0:	fe 01       	movw	r30, r28
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1aa:	d1 f7       	brne	.-12     	; 0x1a0 <main+0x64>
 1ac:	28 ee       	ldi	r18, 0xE8	; 232
 1ae:	33 e0       	ldi	r19, 0x03	; 3
 1b0:	fe 01       	movw	r30, r28
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <main+0x74>
 1bc:	28 ee       	ldi	r18, 0xE8	; 232
 1be:	33 e0       	ldi	r19, 0x03	; 3
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <main+0x84>
 1cc:	28 ee       	ldi	r18, 0xE8	; 232
 1ce:	33 e0       	ldi	r19, 0x03	; 3
 1d0:	fe 01       	movw	r30, r28
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	d1 f7       	brne	.-12     	; 0x1d0 <main+0x94>
 1dc:	28 ee       	ldi	r18, 0xE8	; 232
 1de:	33 e0       	ldi	r19, 0x03	; 3
 1e0:	fe 01       	movw	r30, r28
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ea:	d1 f7       	brne	.-12     	; 0x1e0 <main+0xa4>
 1ec:	28 ee       	ldi	r18, 0xE8	; 232
 1ee:	33 e0       	ldi	r19, 0x03	; 3
 1f0:	fe 01       	movw	r30, r28
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	d1 f7       	brne	.-12     	; 0x1f0 <main+0xb4>
 1fc:	28 ee       	ldi	r18, 0xE8	; 232
 1fe:	33 e0       	ldi	r19, 0x03	; 3
 200:	fe 01       	movw	r30, r28
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	21 50       	subi	r18, 0x01	; 1
 208:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20a:	d1 f7       	brne	.-12     	; 0x200 <main+0xc4>
	uint8_t dato = '0';
	
	while(1){
		_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);
		USART0_Enviar(dato++);
 20c:	18 2f       	mov	r17, r24
 20e:	1f 5f       	subi	r17, 0xFF	; 255
 210:	0e 94 d7 01 	call	0x3ae	; 0x3ae <USART0_Enviar>
 214:	81 2f       	mov	r24, r17
 216:	aa cf       	rjmp	.-172    	; 0x16c <main+0x30>

00000218 <LCD_enviarNibble>:
 *			uint8_t rs -> Selector de registro LCD (1:Instruccion, 0:Dato)
 * @PRE: n y rs se encuentran bien definidos
 * @POS: Se envian los datos al LCD
 * @Return: Void
 */
static void LCD_enviarNibble(uint8_t n, uint8_t rs){
 218:	98 2f       	mov	r25, r24

	LCD_CMD_PORT_OUT &= ~_BV(LCD_RW);
 21a:	12 98       	cbi	0x02, 2	; 2

	if (rs)
 21c:	66 23       	and	r22, r22
 21e:	11 f0       	breq	.+4      	; 0x224 <LCD_enviarNibble+0xc>
		LCD_CMD_PORT_OUT |= _BV(LCD_RS);
 220:	11 9a       	sbi	0x02, 1	; 2
 222:	01 c0       	rjmp	.+2      	; 0x226 <LCD_enviarNibble+0xe>
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
 224:	11 98       	cbi	0x02, 1	; 2
	
	LCD_DTA_PORT_OUT &= ~LCD_DTA_BITS;
 226:	82 b1       	in	r24, 0x02	; 2
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	82 b9       	out	0x02, r24	; 2
	LCD_DTA_PORT_OUT |= (n<<LCD_D4) & LCD_DTA_BITS;
 22c:	82 b1       	in	r24, 0x02	; 2
 22e:	92 95       	swap	r25
 230:	90 7f       	andi	r25, 0xF0	; 240
 232:	89 2b       	or	r24, r25
 234:	82 b9       	out	0x02, r24	; 2

static inline uint8_t LCD_pulsoEnable(bool lectura){
	
	uint8_t dato;
	
	LCD_CMD_PORT_OUT |= _BV(LCD_E);
 236:	13 9a       	sbi	0x02, 3	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_enviarNibble+0x22>
	if(lectura)
		dato = LCD_DTA_PORT_IN & LCD_DTA_BITS;
	else
		dato = 0x00;

	LCD_CMD_PORT_OUT &= ~_BV(LCD_E);
 23e:	13 98       	cbi	0x02, 3	; 2
	
	LCD_DTA_PORT_OUT &= ~LCD_DTA_BITS;
	LCD_DTA_PORT_OUT |= (n<<LCD_D4) & LCD_DTA_BITS;
	//LCD_DTA_PORT_OUT |= ((n<<LCD_D4)& LCD_DTA_BITS);
	(void)LCD_pulsoEnable(false);
}
 240:	08 95       	ret

00000242 <LCD_enviarByte>:
 * @PRE: Los parametros se encuentran bien definidos
 * @POS: Se envian dos nibbles para completar el dato/instruccion en el controlador del LCD
 * @RETURN: Void
 */

void LCD_enviarByte(uint8_t by, uint8_t rs){
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	18 2f       	mov	r17, r24
 248:	06 2f       	mov	r16, r22

	LCD_enviarNibble(by>>4, rs);		// Enviamos la parte alta b[7..4]
 24a:	82 95       	swap	r24
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_enviarNibble>
	LCD_enviarNibble(by & 0x0F, rs);	// Enviamos la parte baja b[3..0]
 252:	81 2f       	mov	r24, r17
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	60 2f       	mov	r22, r16
 258:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_enviarNibble>
}
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <LCD_recibirNibble>:
 */
static uint8_t LCD_recibirNibble(uint8_t rs){
	
	uint8_t dato;

	LCD_CMD_PORT_OUT |= _BV(LCD_RW);
 262:	12 9a       	sbi	0x02, 2	; 2

	LCD_DTA_PORT_DDR &= ~LCD_DTA_BITS;
 264:	91 b1       	in	r25, 0x01	; 1
 266:	9f 70       	andi	r25, 0x0F	; 15
 268:	91 b9       	out	0x01, r25	; 1

	if (rs)
 26a:	88 23       	and	r24, r24
 26c:	11 f0       	breq	.+4      	; 0x272 <LCD_recibirNibble+0x10>
		LCD_CMD_PORT_OUT |= _BV(LCD_RS);
 26e:	11 9a       	sbi	0x02, 1	; 2
 270:	01 c0       	rjmp	.+2      	; 0x274 <LCD_recibirNibble+0x12>
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
 272:	11 98       	cbi	0x02, 1	; 2

static inline uint8_t LCD_pulsoEnable(bool lectura){
	
	uint8_t dato;
	
	LCD_CMD_PORT_OUT |= _BV(LCD_E);
 274:	13 9a       	sbi	0x02, 3	; 2
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_recibirNibble+0x16>
		#endif /* F_CPU > 2000000UL */
		#endif /* F_CPU > 1000000UL */
	#endif /* F_CPU > 4000000UL */

	if(lectura)
		dato = LCD_DTA_PORT_IN & LCD_DTA_BITS;
 27c:	80 b1       	in	r24, 0x00	; 0
	else
		dato = 0x00;

	LCD_CMD_PORT_OUT &= ~_BV(LCD_E);
 27e:	13 98       	cbi	0x02, 3	; 2
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
	
	dato = LCD_pulsoEnable(true);

	LCD_DTA_PORT_DDR |= LCD_DTA_BITS;
 280:	91 b1       	in	r25, 0x01	; 1
 282:	90 6f       	ori	r25, 0xF0	; 240
 284:	91 b9       	out	0x01, r25	; 1
	LCD_CMD_PORT_OUT &= ~_BV(LCD_RW);
 286:	12 98       	cbi	0x02, 2	; 2

	return (dato & LCD_DTA_BITS)>>LCD_D4;


}
 288:	82 95       	swap	r24
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	08 95       	ret

0000028e <LCD_recibirByte>:
 * @PRE: Los parametros se encuentran bien definidos
 * @POS: Se reciben dos nibbles para completar el dato/instruccion proveniente del controlador del LCD
 * @RETURN: Void
 */

uint8_t LCD_recibirByte(uint8_t rs){
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	18 2f       	mov	r17, r24
	
	uint8_t dato;
	dato = LCD_recibirNibble(rs) << 4;
 294:	0e 94 31 01 	call	0x262	; 0x262 <LCD_recibirNibble>
 298:	08 2f       	mov	r16, r24
 29a:	02 95       	swap	r16
 29c:	00 7f       	andi	r16, 0xF0	; 240
	dato |= LCD_recibirNibble(rs);
 29e:	81 2f       	mov	r24, r17
 2a0:	0e 94 31 01 	call	0x262	; 0x262 <LCD_recibirNibble>
	return dato;

}
 2a4:	80 2b       	or	r24, r16
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <LCD_esperarListo>:
/**
 * Este metodo genera una espera activa mientras se encuentra activada la bandera de ocupado
 * del controlador del LCD.
 */
void LCD_esperarListo(void){
	while( LCD_recibirByte(0) & LCD_BUSYFLAG);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_recibirByte>
 2b2:	87 fd       	sbrc	r24, 7
 2b4:	fb cf       	rjmp	.-10     	; 0x2ac <LCD_esperarListo>
}
 2b6:	08 95       	ret

000002b8 <LCD_init>:
 * @PRE: El voltaje ya se debe haber estabilizado tanto en el micro como en el LCD
 * @POS: Se inicializa el protocolo de comunicacion con el controlador del LCD con 
 *		 las opciones escogidas en el archivo 'defines.h'
 * @RETURN: Void
 */
void LCD_init(void){
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
	
	LCD_CMD_PORT_DDR |= _BV(LCD_RS)|_BV(LCD_RW)|_BV(LCD_E);
 2bc:	81 b1       	in	r24, 0x01	; 1
 2be:	8e 60       	ori	r24, 0x0E	; 14
 2c0:	81 b9       	out	0x01, r24	; 1
	LCD_DTA_PORT_DDR |= LCD_DTA_BITS;
 2c2:	81 b1       	in	r24, 0x01	; 1
 2c4:	80 6f       	ori	r24, 0xF0	; 240
 2c6:	81 b9       	out	0x01, r24	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	9c e9       	ldi	r25, 0x9C	; 156
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_init+0x14>
	_delay_ms(20);

	// Se realiza una inicializacion por instrucciones para evitar problemas si
	// la fuente no es capaz de generar una inicializacion por reset automatico

	LCD_enviarNibble(0x03, 0);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_enviarNibble>
 2d8:	80 e1       	ldi	r24, 0x10	; 16
 2da:	97 e2       	ldi	r25, 0x27	; 39
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_init+0x24>
	_delay_ms(5);
	LCD_enviarNibble(0x03, 0);
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_enviarNibble>
 2e8:	08 ee       	ldi	r16, 0xE8	; 232
 2ea:	13 e0       	ldi	r17, 0x03	; 3
 2ec:	c8 01       	movw	r24, r16
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_init+0x36>
	_delay_ms(0.5);
	LCD_enviarNibble(0x03, 0);
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_enviarNibble>
 2fa:	c8 01       	movw	r24, r16
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_init+0x44>
	_delay_ms(0.5);


	LCD_enviarNibble( LCD_FNSET>>4, 0);
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_enviarNibble>
	LCD_esperarListo();
 308:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
	LCD_enviarByte( LCD_FNSET, 0);
 30c:	88 e2       	ldi	r24, 0x28	; 40
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
	LCD_esperarListo();
 314:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
	LCD_enviarByte( LCD_DSPCTR, 0);
 318:	8c e0       	ldi	r24, 0x0C	; 12
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
	LCD_esperarListo();
 320:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
	LCD_enviarByte( LCD_ENTMOD, 0);
 324:	86 e0       	ldi	r24, 0x06	; 6
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
	LCD_esperarListo();
 32c:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
	LCD_enviarByte( 0x01, 0);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
	LCD_esperarListo();
 338:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>
	LCD_enviarByte( 0x02, 0);
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	0e 94 21 01 	call	0x242	; 0x242 <LCD_enviarByte>
	LCD_esperarListo();
 344:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_esperarListo>

}
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <USART0_init>:
 * @RETURN: Void
 */
void USART0_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSR0A = 0x20;
 34e:	80 e2       	ldi	r24, 0x20	; 32
 350:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x00;
 354:	e1 ec       	ldi	r30, 0xC1	; 193
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	10 82       	st	Z, r1
	UCSR0C = 0x06;
 35a:	a2 ec       	ldi	r26, 0xC2	; 194
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	8c 93       	st	X, r24
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRR0L=UBRRVAL;			//Parte baja del byte
 362:	8f ec       	ldi	r24, 0xCF	; 207
 364:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=(UBRRVAL>>8);	//Parte alta del byte
 368:	10 92 c5 00 	sts	0x00C5, r1
		case 7: UCSR0C &= ~(_BV(UCSZ00));break;
		case 9: UCSR0B|= _BV(UCSZ02);break;
		default:break;
	}

	UCSR0B |= (INT_TX_COMPLETA)?_BV(TXCIE0):0;
 36c:	80 81       	ld	r24, Z
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	80 83       	st	Z, r24
	UCSR0B |= (INT_RX_COMPLETA)?_BV(RXCIE0):0;
 372:	80 81       	ld	r24, Z
 374:	80 83       	st	Z, r24

	switch(CONTROL_PARIEDAD){
		case 1: UCSR0C |= _BV(UPM01); break;
 376:	8c 91       	ld	r24, X
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	8c 93       	st	X, r24
		default: break;
	}

	if(NUM_STOP==2) UCSR0C |= _BV(USBS0);
	if(CLK_POL) UCSR0C |= _BV(UCPOL0);
}
 37c:	08 95       	ret

0000037e <USART0_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART0_EnableTx(){
	UCSR0B |= _BV(TXEN0);
 37e:	e1 ec       	ldi	r30, 0xC1	; 193
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	88 60       	ori	r24, 0x08	; 8
 386:	80 83       	st	Z, r24
}
 388:	08 95       	ret

0000038a <USART0_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART0_DisableTx(){
	UCSR0B &= ~_BV(TXEN0);
 38a:	e1 ec       	ldi	r30, 0xC1	; 193
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	87 7f       	andi	r24, 0xF7	; 247
 392:	80 83       	st	Z, r24
}
 394:	08 95       	ret

00000396 <USART0_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART0_EnableRx(){
	UCSR0B |= _BV(RXEN0);
 396:	e1 ec       	ldi	r30, 0xC1	; 193
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	80 61       	ori	r24, 0x10	; 16
 39e:	80 83       	st	Z, r24
}
 3a0:	08 95       	ret

000003a2 <USART0_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART0_DisableRx(){
 	UCSR0B &= ~_BV(RXEN0);
 3a2:	e1 ec       	ldi	r30, 0xC1	; 193
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	8f 7e       	andi	r24, 0xEF	; 239
 3aa:	80 83       	st	Z, r24
 }
 3ac:	08 95       	ret

000003ae <USART0_Enviar>:
  * @PARAMS uint8_t dato -> Dato que se desea enviar
  * @PRE:   El puerto USART0 se encuentra configurado y habilitado para el envio de mensajes+
  * @POST:  Se coloca el mensaje en el buffer de salida de la USART0
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){
 3ae:	98 2f       	mov	r25, r24

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 3b0:	80 91 c0 00 	lds	r24, 0x00C0
 3b4:	85 ff       	sbrs	r24, 5
 3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <USART0_Enviar+0x2>

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 3b8:	90 93 c6 00 	sts	0x00C6, r25

}
 3bc:	08 95       	ret

000003be <USART0_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART0_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSR0A & (1<<RXC0)) );
 3be:	80 91 c0 00 	lds	r24, 0x00C0
 3c2:	87 ff       	sbrs	r24, 7
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <USART0_Recibir>

	return UDR0;
 3c6:	80 91 c6 00 	lds	r24, 0x00C6
}
 3ca:	08 95       	ret

000003cc <SPI_init>:
void SPI_init(void){

	if(SPI_MSTR){
		// Se inicializa el microcontrolador como Maestro
		// Se configura el pin MISO como entrada; SCK, MOSI y SS como salida
		SPI_DDR &= ~_BV(SPI_MISO);
 3cc:	24 98       	cbi	0x04, 4	; 4
		SPI_DDR |= _BV(SPI_SS)|_BV(SPI_SCK)|_BV(SPI_MOSI);
 3ce:	84 b1       	in	r24, 0x04	; 4
 3d0:	8a 62       	ori	r24, 0x2A	; 42
 3d2:	84 b9       	out	0x04, r24	; 4
		SPI_PORT |= _BV(SPI_SS)|_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SCK);
 3d4:	85 b1       	in	r24, 0x05	; 5
 3d6:	8a 63       	ori	r24, 0x3A	; 58
 3d8:	85 b9       	out	0x05, r24	; 5
		SPI_DDR |= _BV(SPI_MISO);
		SPI_PORT |= _BV(SPI_SS)|_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SCK);

	}

	SPCR = 0x00;
 3da:	1c bc       	out	0x2c, r1	; 44
	SPCR |= (SPI_INT)?_BV(SPIE):0;
 3dc:	8c b5       	in	r24, 0x2c	; 44
 3de:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_DATA_ORDER)?_BV(DORD):0;
 3e0:	8c b5       	in	r24, 0x2c	; 44
 3e2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_MSTR)?_BV(MSTR):0;
 3e4:	8c b5       	in	r24, 0x2c	; 44
 3e6:	80 61       	ori	r24, 0x10	; 16
 3e8:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_CPOL)?_BV(CPOL):0;
 3ea:	8c b5       	in	r24, 0x2c	; 44
 3ec:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_CHPA)?_BV(CPHA):0;
 3ee:	8c b5       	in	r24, 0x2c	; 44
 3f0:	8c bd       	out	0x2c, r24	; 44

	switch(SPI_SPR){
		case 16:SPCR |= _BV(SPR0);break;
		case 64:SPCR |= _BV(SPR1);break;
 3f2:	8c b5       	in	r24, 0x2c	; 44
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	8c bd       	out	0x2c, r24	; 44
		case 128:SPCR |= _BV(SPR0)|_BV(SPR1);break;
		default:break;
	}

	SPSR = 0x00;
 3f8:	1d bc       	out	0x2d, r1	; 45
	SPSR |= (SPI_2X)?_BV(SPI2X):0;
 3fa:	8d b5       	in	r24, 0x2d	; 45
 3fc:	8d bd       	out	0x2d, r24	; 45

	SPCR |= _BV(SPE);
 3fe:	8c b5       	in	r24, 0x2c	; 44
 400:	80 64       	ori	r24, 0x40	; 64
 402:	8c bd       	out	0x2c, r24	; 44

}
 404:	08 95       	ret

00000406 <SPI_Enviar>:
 * @RETURN: Void
 */
void SPI_Enviar(uint8_t dato){
	
	// Se inicializa la transmision
	SPDR = dato;
 406:	8e bd       	out	0x2e, r24	; 46
	// Se espera a que la transmision se complete
	while(!(SPSR & _BV(SPIF)));
 408:	0d b4       	in	r0, 0x2d	; 45
 40a:	07 fe       	sbrs	r0, 7
 40c:	fd cf       	rjmp	.-6      	; 0x408 <SPI_Enviar+0x2>
}
 40e:	08 95       	ret

00000410 <SPI_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t SPI_Recibir(){

	// Se espera a que la transmision se complete
	while(!(SPSR & _BV(SPIF)));
 410:	0d b4       	in	r0, 0x2d	; 45
 412:	07 fe       	sbrs	r0, 7
 414:	fd cf       	rjmp	.-6      	; 0x410 <SPI_Recibir>
	return SPDR;
 416:	8e b5       	in	r24, 0x2e	; 46
}
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
