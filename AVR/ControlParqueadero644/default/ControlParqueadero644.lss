
ControlParqueadero644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800144  00800144  00000a60  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000231  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b3  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070d  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001091  00000000  00000000  00002711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  000037a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ea  00000000  00000000  00003d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00004551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_20>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_22>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_26>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e8       	ldi	r30, 0x88	; 136
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a4 34       	cpi	r26, 0x44	; 68
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a4 e4       	ldi	r26, 0x44	; 68
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 35       	cpi	r26, 0x58	; 88
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 81 01 	call	0x302	; 0x302 <main>
  a6:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_enviarNibble>:
 *			uint8_t rs -> Selector de registro LCD (1:Instruccion, 0:Dato)
 * @PRE: n y rs se encuentran bien definidos
 * @POS: Se envian los datos al LCD
 * @Return: Void
 */
static void LCD_enviarNibble(uint8_t n, uint8_t rs){
  ae:	98 2f       	mov	r25, r24

	LCD_CMD_PORT_OUT &= ~_BV(LCD_RW);
  b0:	12 98       	cbi	0x02, 2	; 2

	if (rs)
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <LCD_enviarNibble+0xc>
		LCD_CMD_PORT_OUT |= _BV(LCD_RS);
  b6:	11 9a       	sbi	0x02, 1	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <LCD_enviarNibble+0xe>
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
  ba:	11 98       	cbi	0x02, 1	; 2
	
	LCD_DTA_PORT_OUT &= ~LCD_DTA_BITS;
  bc:	82 b1       	in	r24, 0x02	; 2
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	82 b9       	out	0x02, r24	; 2
	LCD_DTA_PORT_OUT |= (n<<LCD_D4) & LCD_DTA_BITS;
  c2:	82 b1       	in	r24, 0x02	; 2
  c4:	92 95       	swap	r25
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	89 2b       	or	r24, r25
  ca:	82 b9       	out	0x02, r24	; 2

static inline uint8_t LCD_pulsoEnable(bool lectura){
	
	uint8_t dato;
	
	LCD_CMD_PORT_OUT |= _BV(LCD_E);
  cc:	13 9a       	sbi	0x02, 3	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_enviarNibble+0x22>
	if(lectura)
		dato = LCD_DTA_PORT_IN & LCD_DTA_BITS;
	else
		dato = 0x00;

	LCD_CMD_PORT_OUT &= ~_BV(LCD_E);
  d4:	13 98       	cbi	0x02, 3	; 2
	
	LCD_DTA_PORT_OUT &= ~LCD_DTA_BITS;
	LCD_DTA_PORT_OUT |= (n<<LCD_D4) & LCD_DTA_BITS;
	//LCD_DTA_PORT_OUT |= ((n<<LCD_D4)& LCD_DTA_BITS);
	(void)LCD_pulsoEnable(false);
}
  d6:	08 95       	ret

000000d8 <LCD_enviarByte>:
 * @PRE: Los parametros se encuentran bien definidos
 * @POS: Se envian dos nibbles para completar el dato/instruccion en el controlador del LCD
 * @RETURN: Void
 */

void LCD_enviarByte(uint8_t by, uint8_t rs){
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	18 2f       	mov	r17, r24
  de:	06 2f       	mov	r16, r22

	LCD_enviarNibble(by>>4, rs);		// Enviamos la parte alta b[7..4]
  e0:	82 95       	swap	r24
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	0e 94 57 00 	call	0xae	; 0xae <LCD_enviarNibble>
	LCD_enviarNibble(by & 0x0F, rs);	// Enviamos la parte baja b[3..0]
  e8:	81 2f       	mov	r24, r17
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	60 2f       	mov	r22, r16
  ee:	0e 94 57 00 	call	0xae	; 0xae <LCD_enviarNibble>
}
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <LCD_recibirNibble>:
 */
static uint8_t LCD_recibirNibble(uint8_t rs){
	
	uint8_t dato;

	LCD_CMD_PORT_OUT |= _BV(LCD_RW);
  f8:	12 9a       	sbi	0x02, 2	; 2

	LCD_DTA_PORT_DDR &= ~LCD_DTA_BITS;
  fa:	91 b1       	in	r25, 0x01	; 1
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	91 b9       	out	0x01, r25	; 1

	if (rs)
 100:	88 23       	and	r24, r24
 102:	11 f0       	breq	.+4      	; 0x108 <LCD_recibirNibble+0x10>
		LCD_CMD_PORT_OUT |= _BV(LCD_RS);
 104:	11 9a       	sbi	0x02, 1	; 2
 106:	01 c0       	rjmp	.+2      	; 0x10a <LCD_recibirNibble+0x12>
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
 108:	11 98       	cbi	0x02, 1	; 2

static inline uint8_t LCD_pulsoEnable(bool lectura){
	
	uint8_t dato;
	
	LCD_CMD_PORT_OUT |= _BV(LCD_E);
 10a:	13 9a       	sbi	0x02, 3	; 2
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_recibirNibble+0x16>
		#endif /* F_CPU > 2000000UL */
		#endif /* F_CPU > 1000000UL */
	#endif /* F_CPU > 4000000UL */

	if(lectura)
		dato = LCD_DTA_PORT_IN & LCD_DTA_BITS;
 112:	80 b1       	in	r24, 0x00	; 0
	else
		dato = 0x00;

	LCD_CMD_PORT_OUT &= ~_BV(LCD_E);
 114:	13 98       	cbi	0x02, 3	; 2
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
	
	dato = LCD_pulsoEnable(true);

	LCD_DTA_PORT_DDR |= LCD_DTA_BITS;
 116:	91 b1       	in	r25, 0x01	; 1
 118:	90 6f       	ori	r25, 0xF0	; 240
 11a:	91 b9       	out	0x01, r25	; 1
	LCD_CMD_PORT_OUT &= ~_BV(LCD_RW);
 11c:	12 98       	cbi	0x02, 2	; 2

	return (dato & LCD_DTA_BITS)>>LCD_D4;


}
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	08 95       	ret

00000124 <LCD_recibirByte>:
 * @PRE: Los parametros se encuentran bien definidos
 * @POS: Se reciben dos nibbles para completar el dato/instruccion proveniente del controlador del LCD
 * @RETURN: Void
 */

uint8_t LCD_recibirByte(uint8_t rs){
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	18 2f       	mov	r17, r24
	
	uint8_t dato;
	dato = LCD_recibirNibble(rs) << 4;
 12a:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_recibirNibble>
 12e:	08 2f       	mov	r16, r24
 130:	02 95       	swap	r16
 132:	00 7f       	andi	r16, 0xF0	; 240
	dato |= LCD_recibirNibble(rs);
 134:	81 2f       	mov	r24, r17
 136:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_recibirNibble>
	return dato;

}
 13a:	80 2b       	or	r24, r16
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <LCD_esperarListo>:
/**
 * Este metodo genera una espera activa mientras se encuentra activada la bandera de ocupado
 * del controlador del LCD.
 */
void LCD_esperarListo(void){
	while( LCD_recibirByte(0) & LCD_BUSYFLAG);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 92 00 	call	0x124	; 0x124 <LCD_recibirByte>
 148:	87 fd       	sbrc	r24, 7
 14a:	fb cf       	rjmp	.-10     	; 0x142 <LCD_esperarListo>
}
 14c:	08 95       	ret

0000014e <LCD_init>:
 * @PRE: El voltaje ya se debe haber estabilizado tanto en el micro como en el LCD
 * @POS: Se inicializa el protocolo de comunicacion con el controlador del LCD con 
 *		 las opciones escogidas en el archivo 'defines.h'
 * @RETURN: Void
 */
void LCD_init(void){
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
	
	LCD_CMD_PORT_DDR |= _BV(LCD_RS)|_BV(LCD_RW)|_BV(LCD_E);
 152:	81 b1       	in	r24, 0x01	; 1
 154:	8e 60       	ori	r24, 0x0E	; 14
 156:	81 b9       	out	0x01, r24	; 1
	LCD_DTA_PORT_DDR |= LCD_DTA_BITS;
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	80 6f       	ori	r24, 0xF0	; 240
 15c:	81 b9       	out	0x01, r24	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_init+0x14>
	_delay_ms(20);

	// Se realiza una inicializacion por instrucciones para evitar problemas si
	// la fuente no es capaz de generar una inicializacion por reset automatico

	LCD_enviarNibble(0x03, 0);
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	0e 94 57 00 	call	0xae	; 0xae <LCD_enviarNibble>
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	97 e2       	ldi	r25, 0x27	; 39
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_init+0x24>
	_delay_ms(5);
	LCD_enviarNibble(0x03, 0);
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	0e 94 57 00 	call	0xae	; 0xae <LCD_enviarNibble>
 17e:	08 ee       	ldi	r16, 0xE8	; 232
 180:	13 e0       	ldi	r17, 0x03	; 3
 182:	c8 01       	movw	r24, r16
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_init+0x36>
	_delay_ms(0.5);
	LCD_enviarNibble(0x03, 0);
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	0e 94 57 00 	call	0xae	; 0xae <LCD_enviarNibble>
 190:	c8 01       	movw	r24, r16
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_init+0x44>
	_delay_ms(0.5);


	LCD_enviarNibble( LCD_FNSET>>4, 0);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	0e 94 57 00 	call	0xae	; 0xae <LCD_enviarNibble>
	LCD_esperarListo();
 19e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarByte( LCD_FNSET, 0);
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
	LCD_esperarListo();
 1aa:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarByte( LCD_DSPCTR, 0);
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
	LCD_esperarListo();
 1b6:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarByte( LCD_ENTMOD, 0);
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
	LCD_esperarListo();
 1c2:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarByte( 0x01, 0);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
	LCD_esperarListo();
 1ce:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarByte( 0x02, 0);
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
	LCD_esperarListo();
 1da:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>

}
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <USART0_init>:
 * @RETURN: Void
 */
void USART0_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSR0A = 0x20;
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x00;
 1ea:	e1 ec       	ldi	r30, 0xC1	; 193
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
	UCSR0C = 0x06;
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	80 93 c2 00 	sts	0x00C2, r24
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRR0L=UBRRVAL;			//Parte baja del byte
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=(UBRRVAL>>8);	//Parte alta del byte
 1fc:	10 92 c5 00 	sts	0x00C5, r1
		case 7: UCSR0C &= ~(_BV(UCSZ00));break;
		case 9: UCSR0B|= _BV(UCSZ02);break;
		default:break;
	}

	UCSR0B |= (INT_TX_COMPLETA)?_BV(TXCIE0):0;
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
	UCSR0B |= (INT_RX_COMPLETA)?_BV(RXCIE0):0;
 206:	80 81       	ld	r24, Z
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	80 83       	st	Z, r24
		default: break;
	}

	if(NUM_STOP==2) UCSR0C |= _BV(USBS0);
	if(CLK_POL) UCSR0C |= _BV(UCPOL0);
}
 20c:	08 95       	ret

0000020e <USART0_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART0_EnableTx(){
	UCSR0B |= _BV(TXEN0);
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 60       	ori	r24, 0x08	; 8
 216:	80 83       	st	Z, r24
}
 218:	08 95       	ret

0000021a <USART0_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART0_DisableTx(){
	UCSR0B &= ~_BV(TXEN0);
 21a:	e1 ec       	ldi	r30, 0xC1	; 193
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	87 7f       	andi	r24, 0xF7	; 247
 222:	80 83       	st	Z, r24
}
 224:	08 95       	ret

00000226 <USART0_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART0_EnableRx(){
	UCSR0B |= _BV(RXEN0);
 226:	e1 ec       	ldi	r30, 0xC1	; 193
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 61       	ori	r24, 0x10	; 16
 22e:	80 83       	st	Z, r24
}
 230:	08 95       	ret

00000232 <USART0_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART0_DisableRx(){
 	UCSR0B &= ~_BV(RXEN0);
 232:	e1 ec       	ldi	r30, 0xC1	; 193
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	80 83       	st	Z, r24
 }
 23c:	08 95       	ret

0000023e <USART0_Enviar>:
  * @PARAMS uint8_t dato -> Dato que se desea enviar
  * @PRE:   El puerto USART0 se encuentra configurado y habilitado para el envio de mensajes+
  * @POST:  Se coloca el mensaje en el buffer de salida de la USART0
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){
 23e:	98 2f       	mov	r25, r24

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 240:	80 91 c0 00 	lds	r24, 0x00C0
 244:	85 ff       	sbrs	r24, 5
 246:	fc cf       	rjmp	.-8      	; 0x240 <USART0_Enviar+0x2>

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 248:	90 93 c6 00 	sts	0x00C6, r25

}
 24c:	08 95       	ret

0000024e <USART0_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART0_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSR0A & (1<<RXC0)) );
 24e:	80 91 c0 00 	lds	r24, 0x00C0
 252:	87 ff       	sbrs	r24, 7
 254:	fc cf       	rjmp	.-8      	; 0x24e <USART0_Recibir>

	return UDR0;
 256:	80 91 c6 00 	lds	r24, 0x00C6
}
 25a:	08 95       	ret

0000025c <USART0_EnviarStrLen>:


void USART0_EnviarStrLen(int len, uint8_t *buf){
 25c:	9c 01       	movw	r18, r24
 25e:	fb 01       	movw	r30, r22
 260:	0a c0       	rjmp	.+20     	; 0x276 <USART0_EnviarStrLen+0x1a>

	for (; len > 0; len--){
		USART0_Enviar(*buf++);
 262:	90 81       	ld	r25, Z
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 264:	80 91 c0 00 	lds	r24, 0x00C0
 268:	85 ff       	sbrs	r24, 5
 26a:	fc cf       	rjmp	.-8      	; 0x264 <USART0_EnviarStrLen+0x8>


void USART0_EnviarStrLen(int len, uint8_t *buf){

	for (; len > 0; len--){
		USART0_Enviar(*buf++);
 26c:	31 96       	adiw	r30, 0x01	; 1

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 26e:	90 93 c6 00 	sts	0x00C6, r25
}


void USART0_EnviarStrLen(int len, uint8_t *buf){

	for (; len > 0; len--){
 272:	21 50       	subi	r18, 0x01	; 1
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	12 16       	cp	r1, r18
 278:	13 06       	cpc	r1, r19
 27a:	9c f3       	brlt	.-26     	; 0x262 <USART0_EnviarStrLen+0x6>
		USART0_Enviar(*buf++);
	}


}
 27c:	08 95       	ret

0000027e <SPI_init>:
void SPI_init(void){

	if(SPI_MSTR){
		// Se inicializa el microcontrolador como Maestro
		// Se configura el pin MISO como entrada; SCK, MOSI y SS como salida
		SPI_DDR &= ~_BV(SPI_MISO);
 27e:	24 98       	cbi	0x04, 4	; 4
		SPI_DDR |= _BV(SPI_SS)|_BV(SPI_SCK)|_BV(SPI_MOSI);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	8a 62       	ori	r24, 0x2A	; 42
 284:	84 b9       	out	0x04, r24	; 4
		SPI_PORT |= _BV(SPI_SS)|_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SCK);
 286:	85 b1       	in	r24, 0x05	; 5
 288:	8a 63       	ori	r24, 0x3A	; 58
 28a:	85 b9       	out	0x05, r24	; 5
		SPI_DDR |= _BV(SPI_MISO);
		SPI_PORT |= _BV(SPI_SS)|_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SCK);

	}

	SPCR = 0x00;
 28c:	1c bc       	out	0x2c, r1	; 44
	SPCR |= (SPI_INT)?_BV(SPIE):0;
 28e:	8c b5       	in	r24, 0x2c	; 44
 290:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_DATA_ORDER)?_BV(DORD):0;
 292:	8c b5       	in	r24, 0x2c	; 44
 294:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_MSTR)?_BV(MSTR):0;
 296:	8c b5       	in	r24, 0x2c	; 44
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_CPOL)?_BV(CPOL):0;
 29c:	8c b5       	in	r24, 0x2c	; 44
 29e:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (SPI_CHPA)?_BV(CPHA):0;
 2a0:	8c b5       	in	r24, 0x2c	; 44
 2a2:	8c bd       	out	0x2c, r24	; 44

	switch(SPI_SPR){
		case 16:SPCR |= _BV(SPR0);break;
		case 64:SPCR |= _BV(SPR1);break;
 2a4:	8c b5       	in	r24, 0x2c	; 44
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	8c bd       	out	0x2c, r24	; 44
		case 128:SPCR |= _BV(SPR0)|_BV(SPR1);break;
		default:break;
	}

	SPSR = 0x00;
 2aa:	1d bc       	out	0x2d, r1	; 45
	SPSR |= (SPI_2X)?_BV(SPI2X):0;
 2ac:	8d b5       	in	r24, 0x2d	; 45
 2ae:	8d bd       	out	0x2d, r24	; 45

	SPCR |= _BV(SPE);
 2b0:	8c b5       	in	r24, 0x2c	; 44
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	8c bd       	out	0x2c, r24	; 44

}
 2b6:	08 95       	ret

000002b8 <SPI_Enviar>:
 * @RETURN: Void
 */
void SPI_Enviar(uint8_t dato){
	
	// Se inicializa la transmision
	SPDR = dato;
 2b8:	8e bd       	out	0x2e, r24	; 46
	// Se espera a que la transmision se complete
	while(!(SPSR & _BV(SPIF)));
 2ba:	0d b4       	in	r0, 0x2d	; 45
 2bc:	07 fe       	sbrs	r0, 7
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <SPI_Enviar+0x2>
}
 2c0:	08 95       	ret

000002c2 <SPI_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t SPI_Recibir(){

	// Se espera a que la transmision se complete
	while(!(SPSR & _BV(SPIF)));
 2c2:	0d b4       	in	r0, 0x2d	; 45
 2c4:	07 fe       	sbrs	r0, 7
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <SPI_Recibir>
	return SPDR;
 2c8:	8e b5       	in	r24, 0x2e	; 46
}
 2ca:	08 95       	ret

000002cc <__vector_22>:
	USART0_Enviar(dato);
}


ISR(USART0_TX_vect) 
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
	//LCD_enviarDTA(0xFF);LCD_esperarListo();
}
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <initHardware>:
 * @RETURN: Void
 */
void initHardware(){

	// Inicializamos el LCD
	LCD_init();
 2e0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_init>

	// Inicializamos el Teclado Matricial
	KBR_DDR  = 0x0F; 
 2e4:	8f e0       	ldi	r24, 0x0F	; 15
 2e6:	8a b9       	out	0x0a, r24	; 10
	KBR_PORT = 0x00;
 2e8:	1b b8       	out	0x0b, r1	; 11

	// Inicializamos Puerto Serial Sincrono (USART0) para comunicacion por modulo RF
	USART0_init();
 2ea:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <USART0_init>
	USART0_EnableTx();
 2ee:	0e 94 07 01 	call	0x20e	; 0x20e <USART0_EnableTx>
	USART0_EnableRx();
 2f2:	0e 94 13 01 	call	0x226	; 0x226 <USART0_EnableRx>

	// Inicializamos el modulo I2C/TWI y el reloj de tiempo real (DS1307)
	sei();
 2f6:	78 94       	sei
	I2C_Init();
 2f8:	0e 94 5f 02 	call	0x4be	; 0x4be <I2C_Init>
	DS1307_Init();
 2fc:	0e 94 ba 03 	call	0x774	; 0x774 <DS1307_Init>
}
 300:	08 95       	ret

00000302 <main>:

//  ------------------------------------------------------------------------
//	PROGRAMA PRINCIPAL DEL SISITEMA
//  ------------------------------------------------------------------------

int main(void) {
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	80 e9       	ldi	r24, 0x90	; 144
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	28 ec       	ldi	r18, 0xC8	; 200
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 314:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 316:	d9 f7       	brne	.-10     	; 0x30e <main+0xc>


	_delay_ms(40);
	initHardware();
 318:	0e 94 70 01 	call	0x2e0	; 0x2e0 <initHardware>
	sei();	// Enable the Global Interrupt Enable flag so that interrupts can be processed 
 31c:	78 94       	sei

	
	LCD_linea1Pos0();LCD_esperarListo();
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 326:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
 32a:	28 ee       	ldi	r18, 0xE8	; 232
 32c:	33 e0       	ldi	r19, 0x03	; 3
 32e:	c8 ec       	ldi	r28, 0xC8	; 200
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	05 c0       	rjmp	.+10     	; 0x33e <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 334:	ce 01       	movw	r24, r28
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x34>
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33e:	21 15       	cp	r18, r1
 340:	31 05       	cpc	r19, r1
 342:	c1 f7       	brne	.-16     	; 0x334 <main+0x32>
 344:	88 ee       	ldi	r24, 0xE8	; 232
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	fe 01       	movw	r30, r28
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 350:	d9 f7       	brne	.-10     	; 0x348 <main+0x46>
 352:	88 ee       	ldi	r24, 0xE8	; 232
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	fe 01       	movw	r30, r28
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35e:	d9 f7       	brne	.-10     	; 0x356 <main+0x54>
 360:	88 ee       	ldi	r24, 0xE8	; 232
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	fe 01       	movw	r30, r28
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36c:	d9 f7       	brne	.-10     	; 0x364 <main+0x62>
 36e:	88 ee       	ldi	r24, 0xE8	; 232
 370:	93 e0       	ldi	r25, 0x03	; 3
 372:	fe 01       	movw	r30, r28
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 378:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 37a:	d9 f7       	brne	.-10     	; 0x372 <main+0x70>
 37c:	88 ee       	ldi	r24, 0xE8	; 232
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	fe 01       	movw	r30, r28
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 388:	d9 f7       	brne	.-10     	; 0x380 <main+0x7e>
 38a:	88 ee       	ldi	r24, 0xE8	; 232
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	fe 01       	movw	r30, r28
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 394:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 396:	d9 f7       	brne	.-10     	; 0x38e <main+0x8c>
 398:	88 ee       	ldi	r24, 0xE8	; 232
 39a:	93 e0       	ldi	r25, 0x03	; 3
 39c:	fe 01       	movw	r30, r28
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a4:	d9 f7       	brne	.-10     	; 0x39c <main+0x9a>
 3a6:	88 ee       	ldi	r24, 0xE8	; 232
 3a8:	93 e0       	ldi	r25, 0x03	; 3
 3aa:	fe 01       	movw	r30, r28
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b2:	d9 f7       	brne	.-10     	; 0x3aa <main+0xa8>
 3b4:	88 ee       	ldi	r24, 0xE8	; 232
 3b6:	93 e0       	ldi	r25, 0x03	; 3
 3b8:	fe 01       	movw	r30, r28
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c0:	d9 f7       	brne	.-10     	; 0x3b8 <main+0xb6>
	//uint8_t dato = '0';
	
	while(1){
		_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);
		//USART0_Enviar('M');
		LCD_enviarDTA('T');LCD_esperarListo();
 3c2:	84 e5       	ldi	r24, 0x54	; 84
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 3ca:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
		LCD_enviarDTA('H');LCD_esperarListo();
 3ce:	88 e4       	ldi	r24, 0x48	; 72
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 3d6:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
		LCD_enviarDTA('D');LCD_esperarListo();
 3da:	84 e4       	ldi	r24, 0x44	; 68
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 3e2:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
		LCD_enviarDTA(' ');LCD_esperarListo();
 3e6:	80 e2       	ldi	r24, 0x20	; 32
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 3ee:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
 3f2:	28 ee       	ldi	r18, 0xE8	; 232
 3f4:	33 e0       	ldi	r19, 0x03	; 3
 3f6:	9e cf       	rjmp	.-196    	; 0x334 <main+0x32>

000003f8 <__vector_26>:
{
	//LCD_enviarDTA(0xFF);LCD_esperarListo();
}

ISR(TWI_vect)
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	4f 93       	push	r20
 408:	5f 93       	push	r21
 40a:	6f 93       	push	r22
 40c:	7f 93       	push	r23
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	af 93       	push	r26
 414:	bf 93       	push	r27
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
	LCD_enviarDTA('T');LCD_esperarListo();
 41a:	84 e5       	ldi	r24, 0x54	; 84
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 422:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarDTA('W');LCD_esperarListo();
 426:	87 e5       	ldi	r24, 0x57	; 87
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 42e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	LCD_enviarDTA('I');LCD_esperarListo();
 432:	89 e4       	ldi	r24, 0x49	; 73
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 43a:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>

}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_20>:

/**
 *  Manejo de la interrupcion generada cuando la USART0 recibe un dato
 */
ISR(USART0_RX_vect) 
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	1f 93       	push	r17
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	uint8_t dato = USART0_Recibir();
 484:	0e 94 27 01 	call	0x24e	; 0x24e <USART0_Recibir>
 488:	18 2f       	mov	r17, r24
	LCD_enviarDTA(dato);LCD_esperarListo();
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_enviarByte>
 490:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_esperarListo>
	USART0_Enviar(dato);
 494:	81 2f       	mov	r24, r17
 496:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	1f 91       	pop	r17
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <I2C_Init>:


void I2C_Init(void){

	// Iniciamos todos los registros en sus valores por defecto
	TWBR = 0x00;	// TWI Bit Rate Register
 4be:	e8 eb       	ldi	r30, 0xB8	; 184
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	10 82       	st	Z, r1
	TWCR = 0x00;	// TWI Control Register
 4c4:	10 92 bc 00 	sts	0x00BC, r1
	TWSR = 0xF8;	// TWI Status Register
 4c8:	88 ef       	ldi	r24, 0xF8	; 248
 4ca:	80 93 b9 00 	sts	0x00B9, r24
	TWAMR = 0x00;	// TWI Address Mask Register
 4ce:	10 92 bd 00 	sts	0x00BD, r1

	TWBR = I2C_TWBR;
 4d2:	81 e2       	ldi	r24, 0x21	; 33
 4d4:	80 83       	st	Z, r24
	TWAR = (I2C_ADDR<<1) | I2C_GENCAL;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	80 93 ba 00 	sts	0x00BA, r24

	// Se inicializa como Esclavo, atento a recibir un llamado con ACK
	//TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);

}
 4dc:	08 95       	ret

000004de <I2C_Enviar>:


uint8_t I2C_Enviar(uint8_t type){

	switch(type) {
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <I2C_Enviar+0x12>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	18 f0       	brcs	.+6      	; 0x4ec <I2C_Enviar+0xe>
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	61 f4       	brne	.+24     	; 0x502 <I2C_Enviar+0x24>
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <I2C_Enviar+0x1a>
		case I2C_START:    // Send Start Condition
			TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);
 4ec:	84 ea       	ldi	r24, 0xA4	; 164
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <I2C_Enviar+0x14>
			break;
			
		case I2C_DATA:     // Send Data
			TWCR = _BV(TWINT)|_BV(TWEN);
 4f0:	84 e8       	ldi	r24, 0x84	; 132
 4f2:	80 93 bc 00 	sts	0x00BC, r24
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <I2C_Enviar+0x24>
			break;

		case I2C_STOP:     // Send Stop Condition
			TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);
 4f8:	84 e9       	ldi	r24, 0x94	; 148
 4fa:	80 93 bc 00 	sts	0x00BC, r24
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
			return 0;
			break;
	}

	// Wait for TWINT flag set in TWCR Register
	while (!(TWCR & _BV(TWINT)));
 502:	80 91 bc 00 	lds	r24, 0x00BC
 506:	87 ff       	sbrs	r24, 7
 508:	fc cf       	rjmp	.-8      	; 0x502 <I2C_Enviar+0x24>
	// Return TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
	return (TW_STATUS);
 50a:	80 91 b9 00 	lds	r24, 0x00B9
 50e:	88 7f       	andi	r24, 0xF8	; 248
}
 510:	08 95       	ret

00000512 <I2C_EscribirBytes>:


int I2C_EscribirBytes(uint8_t sla_id, uint8_t sla_addr, uint8_t sla_mem_addr, int len, uint8_t *buf){
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	f8 01       	movw	r30, r16
	uint8_t n=0;
	uint8_t I2C_TWSR;
	int bytesEscritos =0;

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));
 518:	90 91 bc 00 	lds	r25, 0x00BC
 51c:	9a 7b       	andi	r25, 0xBA	; 186
 51e:	90 93 bc 00 	sts	0x00BC, r25
			case TW_MT_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	67 70       	andi	r22, 0x07	; 7
 526:	70 70       	andi	r23, 0x00	; 0
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	58 2f       	mov	r21, r24
 52e:	52 95       	swap	r21
 530:	50 7f       	andi	r21, 0xF0	; 240
 532:	56 2b       	or	r21, r22
 534:	90 e0       	ldi	r25, 0x00	; 0
		if(n++ >= I2C_MAX_TRIES)
			return -1;
		
	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 536:	74 ea       	ldi	r23, 0xA4	; 164
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 538:	64 e8       	ldi	r22, 0x84	; 132

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));

	restart:
		if(n++ >= I2C_MAX_TRIES)
 53a:	9f 5f       	subi	r25, 0xFF	; 255
 53c:	95 36       	cpi	r25, 0x65	; 101
 53e:	09 f4       	brne	.+2      	; 0x542 <I2C_EscribirBytes+0x30>
 540:	64 c0       	rjmp	.+200    	; 0x60a <I2C_EscribirBytes+0xf8>
			return -1;
		
	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 542:	70 93 bc 00 	sts	0x00BC, r23
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 546:	80 91 bc 00 	lds	r24, 0x00BC
 54a:	87 ff       	sbrs	r24, 7
 54c:	fc cf       	rjmp	.-8      	; 0x546 <I2C_EscribirBytes+0x34>
		I2C_TWSR = TW_STATUS;
 54e:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 552:	88 7f       	andi	r24, 0xF8	; 248
 554:	80 31       	cpi	r24, 0x10	; 16
 556:	29 f0       	breq	.+10     	; 0x562 <I2C_EscribirBytes+0x50>
 558:	88 33       	cpi	r24, 0x38	; 56
 55a:	99 f3       	breq	.-26     	; 0x542 <I2C_EscribirBytes+0x30>
 55c:	88 30       	cpi	r24, 0x08	; 8
 55e:	09 f0       	breq	.+2      	; 0x562 <I2C_EscribirBytes+0x50>
 560:	54 c0       	rjmp	.+168    	; 0x60a <I2C_EscribirBytes+0xf8>
			case TW_MT_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 562:	50 93 bb 00 	sts	0x00BB, r21
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 566:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 56a:	80 91 bc 00 	lds	r24, 0x00BC
 56e:	87 ff       	sbrs	r24, 7
 570:	fc cf       	rjmp	.-8      	; 0x56a <I2C_EscribirBytes+0x58>
		I2C_TWSR = TWSR & 0xF8;
 572:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 576:	88 7f       	andi	r24, 0xF8	; 248
 578:	80 32       	cpi	r24, 0x20	; 32
 57a:	f9 f2       	breq	.-66     	; 0x53a <I2C_EscribirBytes+0x28>
 57c:	88 33       	cpi	r24, 0x38	; 56
 57e:	09 f3       	breq	.-62     	; 0x542 <I2C_EscribirBytes+0x30>
 580:	88 31       	cpi	r24, 0x18	; 24
 582:	d1 f5       	brne	.+116    	; 0x5f8 <I2C_EscribirBytes+0xe6>
			case TW_MT_ARB_LOST:	goto begin;		// Se perdio control del bus, se repite todo el proceso
			default:				goto error;
		}

		// Enviamos la direccion del esclavo donde desamos comenzar a escribir
		TWDR = sla_mem_addr;
 584:	40 93 bb 00 	sts	0x00BB, r20
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion de memoria del esclavo donde inicia escritura
 588:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 58c:	80 91 bc 00 	lds	r24, 0x00BC
 590:	87 ff       	sbrs	r24, 7
 592:	fc cf       	rjmp	.-8      	; 0x58c <I2C_EscribirBytes+0x7a>
		I2C_TWSR = TW_STATUS;
 594:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 598:	88 7f       	andi	r24, 0xF8	; 248
 59a:	80 33       	cpi	r24, 0x30	; 48
 59c:	29 f0       	breq	.+10     	; 0x5a8 <I2C_EscribirBytes+0x96>
 59e:	88 33       	cpi	r24, 0x38	; 56
 5a0:	81 f2       	breq	.-96     	; 0x542 <I2C_EscribirBytes+0x30>
 5a2:	88 32       	cpi	r24, 0x28	; 40
 5a4:	49 f5       	brne	.+82     	; 0x5f8 <I2C_EscribirBytes+0xe6>
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <I2C_EscribirBytes+0x9c>
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	1b c0       	rjmp	.+54     	; 0x5e4 <I2C_EscribirBytes+0xd2>
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	50 e0       	ldi	r21, 0x00	; 0

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
			
			TWDR = *buf++;
			TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos el byte apuntado por buf 
 5b2:	64 e8       	ldi	r22, 0x84	; 132
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <I2C_EscribirBytes+0xc6>
		}

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
			
			TWDR = *buf++;
 5b6:	80 81       	ld	r24, Z
 5b8:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos el byte apuntado por buf 
 5bc:	60 93 bc 00 	sts	0x00BC, r22
			while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 5c0:	80 91 bc 00 	lds	r24, 0x00BC
 5c4:	87 ff       	sbrs	r24, 7
 5c6:	fc cf       	rjmp	.-8      	; 0x5c0 <I2C_EscribirBytes+0xae>
			I2C_TWSR = TW_STATUS;
 5c8:	80 91 b9 00 	lds	r24, 0x00B9

			switch(I2C_TWSR){
 5cc:	88 7f       	andi	r24, 0xF8	; 248
 5ce:	88 32       	cpi	r24, 0x28	; 40
 5d0:	99 f4       	brne	.+38     	; 0x5f8 <I2C_EscribirBytes+0xe6>
		}

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
			
			TWDR = *buf++;
 5d2:	31 96       	adiw	r30, 0x01	; 1
			TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos el byte apuntado por buf 
			while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
			I2C_TWSR = TW_STATUS;

			switch(I2C_TWSR){
				case TW_MT_DATA_ACK:	bytesEscritos++; break;
 5d4:	4f 5f       	subi	r20, 0xFF	; 255
 5d6:	5f 4f       	sbci	r21, 0xFF	; 255
	// Return TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
	return (TW_STATUS);
}


int I2C_EscribirBytes(uint8_t sla_id, uint8_t sla_addr, uint8_t sla_mem_addr, int len, uint8_t *buf){
 5d8:	c9 01       	movw	r24, r18
 5da:	84 1b       	sub	r24, r20
 5dc:	95 0b       	sbc	r25, r21
			case TW_MT_ARB_LOST:	goto begin;
			default:				goto error;
		}

		// Enviamos los bytes que desamos escribir
		for(;len>0; len--){
 5de:	18 16       	cp	r1, r24
 5e0:	19 06       	cpc	r1, r25
 5e2:	4c f3       	brlt	.-46     	; 0x5b6 <I2C_EscribirBytes+0xa4>

		}

	//Enviamos condicion de STOP y retornamos el numero de bytes escritos
	quit:
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 5e4:	84 e9       	ldi	r24, 0x94	; 148
 5e6:	80 93 bc 00 	sts	0x00BC, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5ea:	8d e0       	ldi	r24, 0x0D	; 13
 5ec:	8a 95       	dec	r24
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <I2C_EscribirBytes+0xda>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 5f0:	85 e4       	ldi	r24, 0x45	; 69
 5f2:	80 93 bc 00 	sts	0x00BC, r24
 5f6:	0b c0       	rjmp	.+22     	; 0x60e <I2C_EscribirBytes+0xfc>

		return bytesEscritos;

	// Se genera un error, enviamos condicion de STOP para liberar bus y retornamos -1 indicando el error
	error:
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 5f8:	84 e9       	ldi	r24, 0x94	; 148
 5fa:	80 93 bc 00 	sts	0x00BC, r24
 5fe:	8d e0       	ldi	r24, 0x0D	; 13
 600:	8a 95       	dec	r24
 602:	f1 f7       	brne	.-4      	; 0x600 <I2C_EscribirBytes+0xee>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 604:	85 e4       	ldi	r24, 0x45	; 69
 606:	80 93 bc 00 	sts	0x00BC, r24
		return -1;
 60a:	4f ef       	ldi	r20, 0xFF	; 255
 60c:	5f ef       	ldi	r21, 0xFF	; 255

}
 60e:	ca 01       	movw	r24, r20
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <I2C_LeerBytes>:




int I2C_LeerBytes(uint8_t sla_id, uint8_t sla_addr, uint8_t sla_mem_addr, int len, uint8_t *buf){
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	f8 01       	movw	r30, r16
	uint8_t I2C_TWSR;
	uint8_t I2C_TWCR;
	int bytesLeidos = 0;

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));
 61c:	90 91 bc 00 	lds	r25, 0x00BC
 620:	9a 7b       	andi	r25, 0xBA	; 186
 622:	90 93 bc 00 	sts	0x00BC, r25
			default:				return -1; break;
		}


		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	67 70       	andi	r22, 0x07	; 7
 62a:	70 70       	andi	r23, 0x00	; 0
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	98 2f       	mov	r25, r24
 632:	92 95       	swap	r25
 634:	90 7f       	andi	r25, 0xF0	; 240
 636:	96 2b       	or	r25, r22
			case TW_MR_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+R)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_READ;
 638:	79 2f       	mov	r23, r25
 63a:	71 60       	ori	r23, 0x01	; 1
 63c:	50 e0       	ldi	r21, 0x00	; 0
			return -1;


	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 63e:	a4 ea       	ldi	r26, 0xA4	; 164
		}


		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 640:	64 e8       	ldi	r22, 0x84	; 132

	// Deshabilitamos la recepcion de datos
	TWCR &= ~(_BV(TWEA)|_BV(TWEN)|_BV(TWIE));

	restart:
		if(n++ >= I2C_MAX_TRIES)
 642:	5f 5f       	subi	r21, 0xFF	; 255
 644:	55 36       	cpi	r21, 0x65	; 101
 646:	09 f4       	brne	.+2      	; 0x64a <I2C_LeerBytes+0x34>
 648:	8f c0       	rjmp	.+286    	; 0x768 <I2C_LeerBytes+0x152>
			return -1;


	begin:
		// Enviamos condicion de START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 64a:	a0 93 bc 00 	sts	0x00BC, r26
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 64e:	80 91 bc 00 	lds	r24, 0x00BC
 652:	87 ff       	sbrs	r24, 7
 654:	fc cf       	rjmp	.-8      	; 0x64e <I2C_LeerBytes+0x38>
		I2C_TWSR = TW_STATUS;
 656:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 65a:	88 7f       	andi	r24, 0xF8	; 248
 65c:	80 31       	cpi	r24, 0x10	; 16
 65e:	29 f0       	breq	.+10     	; 0x66a <I2C_LeerBytes+0x54>
 660:	88 33       	cpi	r24, 0x38	; 56
 662:	99 f3       	breq	.-26     	; 0x64a <I2C_LeerBytes+0x34>
 664:	88 30       	cpi	r24, 0x08	; 8
 666:	09 f0       	breq	.+2      	; 0x66a <I2C_LeerBytes+0x54>
 668:	7f c0       	rjmp	.+254    	; 0x768 <I2C_LeerBytes+0x152>
			default:				return -1; break;
		}


		// Enviamos la direccion del esclavo  (SLA+W)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_WRITE;
 66a:	90 93 bb 00 	sts	0x00BB, r25
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para escribir
 66e:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 672:	80 91 bc 00 	lds	r24, 0x00BC
 676:	87 ff       	sbrs	r24, 7
 678:	fc cf       	rjmp	.-8      	; 0x672 <I2C_LeerBytes+0x5c>
		I2C_TWSR = TW_STATUS;
 67a:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 67e:	88 7f       	andi	r24, 0xF8	; 248
 680:	80 32       	cpi	r24, 0x20	; 32
 682:	f9 f2       	breq	.-66     	; 0x642 <I2C_LeerBytes+0x2c>
 684:	88 33       	cpi	r24, 0x38	; 56
 686:	09 f3       	breq	.-62     	; 0x64a <I2C_LeerBytes+0x34>
 688:	88 31       	cpi	r24, 0x18	; 24
 68a:	09 f0       	breq	.+2      	; 0x68e <I2C_LeerBytes+0x78>
 68c:	64 c0       	rjmp	.+200    	; 0x756 <I2C_LeerBytes+0x140>
			case TW_MT_ARB_LOST:	goto begin;		// Se perdio control del bus, se repite todo el proceso
			default:				goto error;
		}

		// Enviamos la direccion del esclavo donde desamos comenzar a leer
		TWDR = sla_mem_addr;
 68e:	40 93 bb 00 	sts	0x00BB, r20
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion de memoria del esclavo donde inicia escritura
 692:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 696:	80 91 bc 00 	lds	r24, 0x00BC
 69a:	87 ff       	sbrs	r24, 7
 69c:	fc cf       	rjmp	.-8      	; 0x696 <I2C_LeerBytes+0x80>
		I2C_TWSR = TW_STATUS;
 69e:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 6a2:	88 7f       	andi	r24, 0xF8	; 248
 6a4:	80 33       	cpi	r24, 0x30	; 48
 6a6:	09 f4       	brne	.+2      	; 0x6aa <I2C_LeerBytes+0x94>
 6a8:	4a c0       	rjmp	.+148    	; 0x73e <I2C_LeerBytes+0x128>
 6aa:	88 33       	cpi	r24, 0x38	; 56
 6ac:	71 f2       	breq	.-100    	; 0x64a <I2C_LeerBytes+0x34>
 6ae:	88 32       	cpi	r24, 0x28	; 40
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <I2C_LeerBytes+0x9e>
 6b2:	51 c0       	rjmp	.+162    	; 0x756 <I2C_LeerBytes+0x140>
			default:				goto error;
		}

		// Ahora se debe cambiar de modo Master Transmission al modo Master Receiver
		// Enviamos condicion de REPEATED START
		TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);		// Enviamos condicion de START
 6b4:	a0 93 bc 00 	sts	0x00BC, r26
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 6b8:	80 91 bc 00 	lds	r24, 0x00BC
 6bc:	87 ff       	sbrs	r24, 7
 6be:	fc cf       	rjmp	.-8      	; 0x6b8 <I2C_LeerBytes+0xa2>
		I2C_TWSR = TW_STATUS;
 6c0:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 6c4:	88 7f       	andi	r24, 0xF8	; 248
 6c6:	80 31       	cpi	r24, 0x10	; 16
 6c8:	31 f0       	breq	.+12     	; 0x6d6 <I2C_LeerBytes+0xc0>
 6ca:	88 33       	cpi	r24, 0x38	; 56
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <I2C_LeerBytes+0xba>
 6ce:	bd cf       	rjmp	.-134    	; 0x64a <I2C_LeerBytes+0x34>
 6d0:	88 30       	cpi	r24, 0x08	; 8
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <I2C_LeerBytes+0xc0>
 6d4:	49 c0       	rjmp	.+146    	; 0x768 <I2C_LeerBytes+0x152>
			case TW_MR_ARB_LOST:	goto begin;
			default:				return -1; break;
		}

		// Enviamos la direccion del esclavo  (SLA+R)
		TWDR = (((sla_id & 0x0F)<<4) | ((sla_addr & 0x07)<<1)) | TW_READ;
 6d6:	70 93 bb 00 	sts	0x00BB, r23
		TWCR = _BV(TWINT)|_BV(TWEN);				// Enviamos la direccion del esclavo con el bit R/~W para leer
 6da:	60 93 bc 00 	sts	0x00BC, r22
		while (!(TWCR & _BV(TWINT)));				// Esperamos a que finlaice la transmision
 6de:	80 91 bc 00 	lds	r24, 0x00BC
 6e2:	87 ff       	sbrs	r24, 7
 6e4:	fc cf       	rjmp	.-8      	; 0x6de <I2C_LeerBytes+0xc8>
		I2C_TWSR = TW_STATUS;
 6e6:	80 91 b9 00 	lds	r24, 0x00B9

		switch(I2C_TWSR){
 6ea:	88 7f       	andi	r24, 0xF8	; 248
 6ec:	80 34       	cpi	r24, 0x40	; 64
 6ee:	29 f0       	breq	.+10     	; 0x6fa <I2C_LeerBytes+0xe4>
 6f0:	88 34       	cpi	r24, 0x48	; 72
 6f2:	29 f1       	breq	.+74     	; 0x73e <I2C_LeerBytes+0x128>
 6f4:	88 33       	cpi	r24, 0x38	; 56
 6f6:	79 f5       	brne	.+94     	; 0x756 <I2C_LeerBytes+0x140>
 6f8:	a8 cf       	rjmp	.-176    	; 0x64a <I2C_LeerBytes+0x34>
 6fa:	94 ec       	ldi	r25, 0xC4	; 196
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	1a c0       	rjmp	.+52     	; 0x736 <I2C_LeerBytes+0x120>
		}

		for(I2C_TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA) ; len>0; len--){

		
			if(len==1)
 702:	21 30       	cpi	r18, 0x01	; 1
 704:	31 05       	cpc	r19, r1
 706:	09 f4       	brne	.+2      	; 0x70a <I2C_LeerBytes+0xf4>
 708:	94 e8       	ldi	r25, 0x84	; 132
				I2C_TWCR = _BV(TWINT) | _BV(TWEN); 	// En el ultimo byte a leer enviamos un NACK para terminar comunicacion
			
			TWCR = I2C_TWCR;
 70a:	90 93 bc 00 	sts	0x00BC, r25
			while (!(TWCR & _BV(TWINT)));				// Esperamos a que finalice la transmision
 70e:	80 91 bc 00 	lds	r24, 0x00BC
 712:	87 ff       	sbrs	r24, 7
 714:	fc cf       	rjmp	.-8      	; 0x70e <I2C_LeerBytes+0xf8>
			I2C_TWSR = TW_STATUS;
 716:	80 91 b9 00 	lds	r24, 0x00B9

			switch(I2C_TWSR){
 71a:	88 7f       	andi	r24, 0xF8	; 248
 71c:	80 35       	cpi	r24, 0x50	; 80
 71e:	21 f0       	breq	.+8      	; 0x728 <I2C_LeerBytes+0x112>
 720:	88 35       	cpi	r24, 0x58	; 88
 722:	c9 f4       	brne	.+50     	; 0x756 <I2C_LeerBytes+0x140>
 724:	20 e0       	ldi	r18, 0x00	; 0
 726:	30 e0       	ldi	r19, 0x00	; 0
				case TW_MR_DATA_NACK:	len=0;
				case TW_MR_DATA_ACK:	
										*buf++ = TWDR;
 728:	80 91 bb 00 	lds	r24, 0x00BB
 72c:	81 93       	st	Z+, r24
										bytesLeidos++;
 72e:	4f 5f       	subi	r20, 0xFF	; 255
 730:	5f 4f       	sbci	r21, 0xFF	; 255
			case TW_MR_SLA_NACK:	goto quit;		// Se recibio NACK, se reincia handshake para invocar al esclavo
			case TW_MR_ARB_LOST:	goto begin;		// Se perdio control del bus, se repite todo el proceso
			default:				goto error;
		}

		for(I2C_TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA) ; len>0; len--){
 732:	21 50       	subi	r18, 0x01	; 1
 734:	30 40       	sbci	r19, 0x00	; 0
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	1c f3       	brlt	.-58     	; 0x702 <I2C_LeerBytes+0xec>
 73c:	02 c0       	rjmp	.+4      	; 0x742 <I2C_LeerBytes+0x12c>

				
		//Enviamos condicion de STOP y retornamos el numero de bytes escritos
		// Leemos todos los bytes desde el esclavo y los almacenamos en el contenedor apuntado por buf

	quit:
 73e:	40 e0       	ldi	r20, 0x00	; 0
 740:	50 e0       	ldi	r21, 0x00	; 0
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 742:	84 e9       	ldi	r24, 0x94	; 148
 744:	80 93 bc 00 	sts	0x00BC, r24
 748:	8d e0       	ldi	r24, 0x0D	; 13
 74a:	8a 95       	dec	r24
 74c:	f1 f7       	brne	.-4      	; 0x74a <I2C_LeerBytes+0x134>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 74e:	85 e4       	ldi	r24, 0x45	; 69
 750:	80 93 bc 00 	sts	0x00BC, r24
 754:	0b c0       	rjmp	.+22     	; 0x76c <I2C_LeerBytes+0x156>
		return bytesLeidos;

	// Se genera un error, enviamos condicion de STOP para liberar bus y retornamos -1 indicando el error
	error:
		TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);		// Enviamos condicion de STOP
 756:	84 e9       	ldi	r24, 0x94	; 148
 758:	80 93 bc 00 	sts	0x00BC, r24
 75c:	8d e0       	ldi	r24, 0x0D	; 13
 75e:	8a 95       	dec	r24
 760:	f1 f7       	brne	.-4      	; 0x75e <I2C_LeerBytes+0x148>
		_delay_us(5);
		// Se inicializa como Esclavo, atento a recibir un llamado con ACK
		TWCR = _BV(TWEA)|_BV(TWEN)|_BV(TWIE);
 762:	85 e4       	ldi	r24, 0x45	; 69
 764:	80 93 bc 00 	sts	0x00BC, r24
		return -1;
 768:	4f ef       	ldi	r20, 0xFF	; 255
 76a:	5f ef       	ldi	r21, 0xFF	; 255
}
 76c:	ca 01       	movw	r24, r20
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <DS1307_Init>:

uint8_t hora[10];	// XXpm:XX:XX
uint8_t fecha[10];	// dd/mm/aaaa;


void DS1307_Init(void){
 774:	cf 92       	push	r12
 776:	df 92       	push	r13
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	df 93       	push	r29
 782:	cf 93       	push	r28
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	60 97       	sbiw	r28, 0x10	; 16
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61

	

	uint8_t DS1307_data[8];
	int error;
	USART0_EnviarLn("  - Comienza leer");
 794:	81 e1       	ldi	r24, 0x11	; 17
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	71 e0       	ldi	r23, 0x01	; 1
 79c:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 7a0:	8d e0       	ldi	r24, 0x0D	; 13
 7a2:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	error = I2C_LeerBytes(DS1307_ID, DS1307_ADDR, 0x00, 8, DS1307_data);
 7a6:	8d e0       	ldi	r24, 0x0D	; 13
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	28 e0       	ldi	r18, 0x08	; 8
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	8e 01       	movw	r16, r28
 7b2:	0f 5f       	subi	r16, 0xFF	; 255
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_LeerBytes>

	if(error == -1){
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	29 f4       	brne	.+10     	; 0x7ca <DS1307_Init+0x56>
		USART0_EnviarLn("ERROR!!");
 7c0:	87 e0       	ldi	r24, 0x07	; 7
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	62 e1       	ldi	r22, 0x12	; 18
 7c6:	71 e0       	ldi	r23, 0x01	; 1
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <DS1307_Init+0x5e>
		}
	else{
		USART0_EnviarLn("Leer OK");
 7ca:	87 e0       	ldi	r24, 0x07	; 7
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	6a e1       	ldi	r22, 0x1A	; 26
 7d0:	71 e0       	ldi	r23, 0x01	; 1
 7d2:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 7d6:	8d e0       	ldi	r24, 0x0D	; 13
 7d8:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>


//	USART0_EnviarLn("CODIGO ERROR: ");USART0_EnviarLn(error);

	
	USART0_EnviarLn("Datos del Reloj:");
 7dc:	80 e1       	ldi	r24, 0x10	; 16
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	62 e2       	ldi	r22, 0x22	; 34
 7e2:	71 e0       	ldi	r23, 0x01	; 1
 7e4:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 7e8:	8d e0       	ldi	r24, 0x0D	; 13
 7ea:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[0]);
 7ee:	69 81       	ldd	r22, Y+1	; 0x01
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 7fa:	8d e0       	ldi	r24, 0x0D	; 13
 7fc:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[1]);
 800:	6a 81       	ldd	r22, Y+2	; 0x02
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 80c:	8d e0       	ldi	r24, 0x0D	; 13
 80e:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[2]);
 812:	6b 81       	ldd	r22, Y+3	; 0x03
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 81e:	8d e0       	ldi	r24, 0x0D	; 13
 820:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[3]);
 824:	6c 81       	ldd	r22, Y+4	; 0x04
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 830:	8d e0       	ldi	r24, 0x0D	; 13
 832:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[4]);
 836:	6d 81       	ldd	r22, Y+5	; 0x05
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 842:	8d e0       	ldi	r24, 0x0D	; 13
 844:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[5]);
 848:	6e 81       	ldd	r22, Y+6	; 0x06
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 854:	8d e0       	ldi	r24, 0x0D	; 13
 856:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[6]);
 85a:	6f 81       	ldd	r22, Y+7	; 0x07
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 866:	8d e0       	ldi	r24, 0x0D	; 13
 868:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn(DS1307_data[7]);
 86c:	68 85       	ldd	r22, Y+8	; 0x08
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 878:	8d e0       	ldi	r24, 0x0D	; 13
 87a:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
	USART0_EnviarLn("Fin Datos Reloj");
 87e:	8f e0       	ldi	r24, 0x0F	; 15
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	63 e3       	ldi	r22, 0x33	; 51
 884:	71 e0       	ldi	r23, 0x01	; 1
 886:	0e 94 2e 01 	call	0x25c	; 0x25c <USART0_EnviarStrLen>
 88a:	8d e0       	ldi	r24, 0x0D	; 13
 88c:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>

	uint8_t DS1307_data2[8];

	DS1307_data2[0] = 0x00;
 890:	19 86       	std	Y+9, r1	; 0x09
	DS1307_data2[1] = 0x00;
 892:	1a 86       	std	Y+10, r1	; 0x0a
	DS1307_data2[2] = 0x00;
 894:	1b 86       	std	Y+11, r1	; 0x0b
	DS1307_data2[3] = 0x00;
 896:	1c 86       	std	Y+12, r1	; 0x0c
	DS1307_data2[4] = 0x00;
 898:	1d 86       	std	Y+13, r1	; 0x0d
	DS1307_data2[5] = 0x00;
 89a:	1e 86       	std	Y+14, r1	; 0x0e
	DS1307_data2[6] = 0x00;
 89c:	1f 86       	std	Y+15, r1	; 0x0f
	DS1307_data2[7] = 0x00;
 89e:	18 8a       	std	Y+16, r1	; 0x10


	error = I2C_EscribirBytes(DS1307_ID, DS1307_ADDR, 0x00, 1, DS1307_data2);
 8a0:	8d e0       	ldi	r24, 0x0D	; 13
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	21 e0       	ldi	r18, 0x01	; 1
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	8e 01       	movw	r16, r28
 8ac:	07 5f       	subi	r16, 0xF7	; 247
 8ae:	1f 4f       	sbci	r17, 0xFF	; 255
 8b0:	0e 94 89 02 	call	0x512	; 0x512 <I2C_EscribirBytes>
 8b4:	28 ee       	ldi	r18, 0xE8	; 232
 8b6:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8b8:	88 ec       	ldi	r24, 0xC8	; 200
 8ba:	e8 2e       	mov	r14, r24
 8bc:	f1 2c       	mov	r15, r1
			_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);
			_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);_delay_ms(100);



			error = I2C_LeerBytes(DS1307_ID, DS1307_ADDR, 0x00, 8, DS1307_data);
 8be:	6e 01       	movw	r12, r28
 8c0:	08 94       	sec
 8c2:	c1 1c       	adc	r12, r1
 8c4:	d1 1c       	adc	r13, r1
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <DS1307_Init+0x15e>
 8c8:	c7 01       	movw	r24, r14
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <DS1307_Init+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8ce:	21 50       	subi	r18, 0x01	; 1
 8d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8d2:	21 15       	cp	r18, r1
 8d4:	31 05       	cpc	r19, r1
 8d6:	c1 f7       	brne	.-16     	; 0x8c8 <DS1307_Init+0x154>
 8d8:	88 ee       	ldi	r24, 0xE8	; 232
 8da:	93 e0       	ldi	r25, 0x03	; 3
 8dc:	f7 01       	movw	r30, r14
 8de:	31 97       	sbiw	r30, 0x01	; 1
 8e0:	f1 f7       	brne	.-4      	; 0x8de <DS1307_Init+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8e4:	d9 f7       	brne	.-10     	; 0x8dc <DS1307_Init+0x168>
 8e6:	88 ee       	ldi	r24, 0xE8	; 232
 8e8:	93 e0       	ldi	r25, 0x03	; 3
 8ea:	f7 01       	movw	r30, r14
 8ec:	31 97       	sbiw	r30, 0x01	; 1
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <DS1307_Init+0x178>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8f2:	d9 f7       	brne	.-10     	; 0x8ea <DS1307_Init+0x176>
 8f4:	88 ee       	ldi	r24, 0xE8	; 232
 8f6:	93 e0       	ldi	r25, 0x03	; 3
 8f8:	f7 01       	movw	r30, r14
 8fa:	31 97       	sbiw	r30, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <DS1307_Init+0x186>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 900:	d9 f7       	brne	.-10     	; 0x8f8 <DS1307_Init+0x184>
 902:	88 ee       	ldi	r24, 0xE8	; 232
 904:	93 e0       	ldi	r25, 0x03	; 3
 906:	f7 01       	movw	r30, r14
 908:	31 97       	sbiw	r30, 0x01	; 1
 90a:	f1 f7       	brne	.-4      	; 0x908 <DS1307_Init+0x194>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 90c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 90e:	d9 f7       	brne	.-10     	; 0x906 <DS1307_Init+0x192>
 910:	88 ee       	ldi	r24, 0xE8	; 232
 912:	93 e0       	ldi	r25, 0x03	; 3
 914:	f7 01       	movw	r30, r14
 916:	31 97       	sbiw	r30, 0x01	; 1
 918:	f1 f7       	brne	.-4      	; 0x916 <DS1307_Init+0x1a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 91a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 91c:	d9 f7       	brne	.-10     	; 0x914 <DS1307_Init+0x1a0>
 91e:	88 ee       	ldi	r24, 0xE8	; 232
 920:	93 e0       	ldi	r25, 0x03	; 3
 922:	f7 01       	movw	r30, r14
 924:	31 97       	sbiw	r30, 0x01	; 1
 926:	f1 f7       	brne	.-4      	; 0x924 <DS1307_Init+0x1b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 928:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 92a:	d9 f7       	brne	.-10     	; 0x922 <DS1307_Init+0x1ae>
 92c:	88 ee       	ldi	r24, 0xE8	; 232
 92e:	93 e0       	ldi	r25, 0x03	; 3
 930:	f7 01       	movw	r30, r14
 932:	31 97       	sbiw	r30, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <DS1307_Init+0x1be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 936:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 938:	d9 f7       	brne	.-10     	; 0x930 <DS1307_Init+0x1bc>
 93a:	88 ee       	ldi	r24, 0xE8	; 232
 93c:	93 e0       	ldi	r25, 0x03	; 3
 93e:	f7 01       	movw	r30, r14
 940:	31 97       	sbiw	r30, 0x01	; 1
 942:	f1 f7       	brne	.-4      	; 0x940 <DS1307_Init+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 944:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 946:	d9 f7       	brne	.-10     	; 0x93e <DS1307_Init+0x1ca>
 948:	88 ee       	ldi	r24, 0xE8	; 232
 94a:	93 e0       	ldi	r25, 0x03	; 3
 94c:	f7 01       	movw	r30, r14
 94e:	31 97       	sbiw	r30, 0x01	; 1
 950:	f1 f7       	brne	.-4      	; 0x94e <DS1307_Init+0x1da>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 952:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 954:	d9 f7       	brne	.-10     	; 0x94c <DS1307_Init+0x1d8>
 956:	8d e0       	ldi	r24, 0x0D	; 13
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	28 e0       	ldi	r18, 0x08	; 8
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	86 01       	movw	r16, r12
 962:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_LeerBytes>
			USART0_Enviar(DS1307_data[1]);USART0_Enviar(':');USART0_Enviar(DS1307_data[0]);USART0_Enviar(0x0D);
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
 96c:	8a e3       	ldi	r24, 0x3A	; 58
 96e:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
 972:	89 81       	ldd	r24, Y+1	; 0x01
 974:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
 978:	8d e0       	ldi	r24, 0x0D	; 13
 97a:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Enviar>
 97e:	28 ee       	ldi	r18, 0xE8	; 232
 980:	33 e0       	ldi	r19, 0x03	; 3
 982:	a2 cf       	rjmp	.-188    	; 0x8c8 <DS1307_Init+0x154>

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
