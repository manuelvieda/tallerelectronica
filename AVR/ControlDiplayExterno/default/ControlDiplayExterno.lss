
ControlDiplayExterno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000374  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000fe  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000364  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001df  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000878  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d1  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006f  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  88:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <enviarDato>:


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  90:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  92:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  94:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  96:	80 fd       	sbrc	r24, 0
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  98:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  9a:	60 fd       	sbrc	r22, 0
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  9c:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  9e:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  a0:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  a2:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  a4:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  a6:	81 fd       	sbrc	r24, 1
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  a8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  aa:	61 fd       	sbrc	r22, 1
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  ac:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  ae:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  b0:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  b2:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  b4:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  b6:	82 fd       	sbrc	r24, 2
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  b8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  ba:	62 fd       	sbrc	r22, 2
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  bc:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  be:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  c0:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  c2:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  c4:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  c6:	83 fd       	sbrc	r24, 3
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  c8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  ca:	63 fd       	sbrc	r22, 3
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  cc:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  ce:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  d0:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  d2:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  d4:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  d6:	84 fd       	sbrc	r24, 4
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  d8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  da:	64 fd       	sbrc	r22, 4
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  dc:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  de:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  e0:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  e2:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  e4:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  e6:	85 fd       	sbrc	r24, 5
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  e8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  ea:	65 fd       	sbrc	r22, 5
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  ec:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  ee:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  f0:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  f2:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  f4:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  f6:	86 fd       	sbrc	r24, 6
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  f8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  fa:	66 fd       	sbrc	r22, 6
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  fc:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  fe:	44 9a       	sbi	0x08, 4	; 8


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
 100:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
 102:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
 104:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
 106:	87 fd       	sbrc	r24, 7
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
 108:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
 10a:	67 fd       	sbrc	r22, 7
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
 10c:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
 10e:	44 9a       	sbi	0x08, 4	; 8
	}

}
 110:	08 95       	ret

00000112 <enviarHora>:

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 112:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 114:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 116:	80 fd       	sbrc	r24, 0
			HORA_PORT |= _BV(PIN_DATO_HORA);
 118:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 11a:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 11c:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 11e:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 120:	81 fd       	sbrc	r24, 1
			HORA_PORT |= _BV(PIN_DATO_HORA);
 122:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 124:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 126:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 128:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 12a:	82 fd       	sbrc	r24, 2
			HORA_PORT |= _BV(PIN_DATO_HORA);
 12c:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 12e:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 130:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 132:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 134:	83 fd       	sbrc	r24, 3
			HORA_PORT |= _BV(PIN_DATO_HORA);
 136:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 138:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 13a:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 13c:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 13e:	84 fd       	sbrc	r24, 4
			HORA_PORT |= _BV(PIN_DATO_HORA);
 140:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 142:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 144:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 146:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 148:	85 fd       	sbrc	r24, 5
			HORA_PORT |= _BV(PIN_DATO_HORA);
 14a:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 14c:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 14e:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 150:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 152:	86 fd       	sbrc	r24, 6
			HORA_PORT |= _BV(PIN_DATO_HORA);
 154:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 156:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 158:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 15a:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
 15c:	87 fd       	sbrc	r24, 7
			HORA_PORT |= _BV(PIN_DATO_HORA);
 15e:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 160:	41 9a       	sbi	0x08, 1	; 8
	}

}
 162:	08 95       	ret

00000164 <initHardware>:
 * @POST:   Se inicializa el hardware. Listo para uso rutinario
 * @RETURN: Void
 */
void initHardware(){
	
	estado = 0x00;
 164:	10 92 00 01 	sts	0x0100, r1
	USART0_init();
 168:	0e 94 3f 01 	call	0x27e	; 0x27e <USART0_init>
	USART0_EnableRx();
 16c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <USART0_EnableRx>

	
	//Inicializamos puerto para datos del display
	CLK_DATO_DDR |= _BV(PIN_CLK_DATOS);
 170:	3c 9a       	sbi	0x07, 4	; 7
	CLK_HORA_DDR |= _BV(PIN_CLK_HORA);
 172:	39 9a       	sbi	0x07, 1	; 7
	DATO1_DDR    |= _BV(PIN_DATO_DATOS1);
 174:	3b 9a       	sbi	0x07, 3	; 7
	DATO2_DDR    |= _BV(PIN_DATO_DATOS2);
 176:	3a 9a       	sbi	0x07, 2	; 7
	HORA_DDR     |= _BV(PIN_DATO_HORA);
 178:	38 9a       	sbi	0x07, 0	; 7

}
 17a:	08 95       	ret

0000017c <main>:

//  ------------------------------------------------------------------------
//	PROGRAMA PRINCIPAL DEL SISITEMA
//  ------------------------------------------------------------------------

int main(void) {
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 180:	48 ec       	ldi	r20, 0xC8	; 200
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	ca 01       	movw	r24, r20
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xa>
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	20 39       	cpi	r18, 0x90	; 144
 192:	38 07       	cpc	r19, r24
 194:	b9 f7       	brne	.-18     	; 0x184 <main+0x8>
 * @POST:   Se inicializa el hardware. Listo para uso rutinario
 * @RETURN: Void
 */
void initHardware(){
	
	estado = 0x00;
 196:	10 92 00 01 	sts	0x0100, r1
	USART0_init();
 19a:	0e 94 3f 01 	call	0x27e	; 0x27e <USART0_init>
	USART0_EnableRx();
 19e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <USART0_EnableRx>

	
	//Inicializamos puerto para datos del display
	CLK_DATO_DDR |= _BV(PIN_CLK_DATOS);
 1a2:	3c 9a       	sbi	0x07, 4	; 7
	CLK_HORA_DDR |= _BV(PIN_CLK_HORA);
 1a4:	39 9a       	sbi	0x07, 1	; 7
	DATO1_DDR    |= _BV(PIN_DATO_DATOS1);
 1a6:	3b 9a       	sbi	0x07, 3	; 7
	DATO2_DDR    |= _BV(PIN_DATO_DATOS2);
 1a8:	3a 9a       	sbi	0x07, 2	; 7
	HORA_DDR     |= _BV(PIN_DATO_HORA);
 1aa:	38 9a       	sbi	0x07, 0	; 7

int main(void) {

	_delay_ms(40);
	initHardware();
	sei();	// Enable the Global Interrupt Enable flag so that interrupts can be processed
 1ac:	78 94       	sei
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x32>

000001b0 <__vector_18>:

/**
 *  Manejo de la interrupcion generada cuando la USART0 recibe un dato
 */
ISR(USART_RX_vect) 
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	uint8_t dato;
	dato = USART0_Recibir();
 1d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <USART0_Recibir>

	switch(estado){
 1d6:	80 91 00 01 	lds	r24, 0x0100
 1da:	88 23       	and	r24, r24
 1dc:	81 f5       	brne	.+96     	; 0x23e <__vector_18+0x8e>

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 1de:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 1e0:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 1e2:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 1e4:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 1e6:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 1e8:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 1ea:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 1ec:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 1ee:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 1f0:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 1f2:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 1f4:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 1f6:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 1f8:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
 1fa:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 1fc:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 1fe:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 200:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
 202:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 204:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 206:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 208:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
 20a:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 20c:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 20e:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 210:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
 212:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 214:	41 9a       	sbi	0x08, 1	; 8
{
	uint8_t dato;
	dato = USART0_Recibir();

	switch(estado){
		case 0x00: 	enviarHora(NUM0); estado=0x01; break;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 00 01 	sts	0x0100, r24
		case 0x01: 	enviarHora(NUM1); estado=0x00; break;
		default: estado = 0x00;
	}
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti
ISR(USART_RX_vect) 
{
	uint8_t dato;
	dato = USART0_Recibir();

	switch(estado){
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	19 f0       	breq	.+6      	; 0x248 <__vector_18+0x98>
		case 0x00: 	enviarHora(NUM0); estado=0x01; break;
		case 0x01: 	enviarHora(NUM1); estado=0x00; break;
		default: estado = 0x00;
 242:	10 92 00 01 	sts	0x0100, r1
 246:	ea cf       	rjmp	.-44     	; 0x21c <__vector_18+0x6c>

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 248:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 24a:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 24c:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 24e:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 250:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 252:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 254:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 256:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 258:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 25a:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 25c:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 25e:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 260:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 262:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 264:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 266:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 268:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 26a:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 26c:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 26e:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 270:	41 9a       	sbi	0x08, 1	; 8

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
 272:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
 274:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 276:	41 9a       	sbi	0x08, 1	; 8
	uint8_t dato;
	dato = USART0_Recibir();

	switch(estado){
		case 0x00: 	enviarHora(NUM0); estado=0x01; break;
		case 0x01: 	enviarHora(NUM1); estado=0x00; break;
 278:	10 92 00 01 	sts	0x0100, r1
 27c:	cf cf       	rjmp	.-98     	; 0x21c <__vector_18+0x6c>

0000027e <USART0_init>:
 * @RETURN: Void
 */
void USART0_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSR0A = 0x20;
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x00;
 284:	e1 ec       	ldi	r30, 0xC1	; 193
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	10 82       	st	Z, r1
	UCSR0C = 0x06;
 28a:	a2 ec       	ldi	r26, 0xC2	; 194
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	8c 93       	st	X, r24
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRR0L=UBRRVAL;			//Parte baja del byte
 292:	8f ec       	ldi	r24, 0xCF	; 207
 294:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=(UBRRVAL>>8);	//Parte alta del byte
 298:	10 92 c5 00 	sts	0x00C5, r1
		case 7: UCSR0C &= ~(_BV(UCSZ00));break;
		case 9: UCSR0B|= _BV(UCSZ02);break;
		default:break;
	}

	UCSR0B |= (INT_TX_COMPLETA)?_BV(TXCIE0):0;
 29c:	80 81       	ld	r24, Z
 29e:	80 83       	st	Z, r24
	UCSR0B |= (INT_RX_COMPLETA)?_BV(RXCIE0):0;
 2a0:	80 81       	ld	r24, Z
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	80 83       	st	Z, r24

	switch(CONTROL_PARIEDAD){
		case 1: UCSR0C |= _BV(UPM01); break;
 2a6:	8c 91       	ld	r24, X
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	8c 93       	st	X, r24
		default: break;
	}

	if(NUM_STOP==2) UCSR0C |= _BV(USBS0);
	if(CLK_POL) UCSR0C |= _BV(UCPOL0);
}
 2ac:	08 95       	ret

000002ae <USART0_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART0_EnableTx(){
	UCSR0B |= _BV(TXEN0);
 2ae:	e1 ec       	ldi	r30, 0xC1	; 193
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	80 83       	st	Z, r24
}
 2b8:	08 95       	ret

000002ba <USART0_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART0_DisableTx(){
	UCSR0B &= ~_BV(TXEN0);
 2ba:	e1 ec       	ldi	r30, 0xC1	; 193
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	87 7f       	andi	r24, 0xF7	; 247
 2c2:	80 83       	st	Z, r24
}
 2c4:	08 95       	ret

000002c6 <USART0_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART0_EnableRx(){
	UCSR0B |= _BV(RXEN0);
 2c6:	e1 ec       	ldi	r30, 0xC1	; 193
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 61       	ori	r24, 0x10	; 16
 2ce:	80 83       	st	Z, r24
}
 2d0:	08 95       	ret

000002d2 <USART0_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART0_DisableRx(){
 	UCSR0B &= ~_BV(RXEN0);
 2d2:	e1 ec       	ldi	r30, 0xC1	; 193
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8f 7e       	andi	r24, 0xEF	; 239
 2da:	80 83       	st	Z, r24
 }
 2dc:	08 95       	ret

000002de <USART0_Enviar>:
  * @PARAMS uint8_t dato -> Dato que se desea enviar
  * @PRE:   El puerto USART0 se encuentra configurado y habilitado para el envio de mensajes+
  * @POST:  Se coloca el mensaje en el buffer de salida de la USART0
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){
 2de:	98 2f       	mov	r25, r24

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	85 ff       	sbrs	r24, 5
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <USART0_Enviar+0x2>

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 2e8:	90 93 c6 00 	sts	0x00C6, r25

}
 2ec:	08 95       	ret

000002ee <USART0_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART0_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSR0A & (1<<RXC0)) );
 2ee:	80 91 c0 00 	lds	r24, 0x00C0
 2f2:	87 ff       	sbrs	r24, 7
 2f4:	fc cf       	rjmp	.-8      	; 0x2ee <USART0_Recibir>

	return UDR0;
 2f6:	80 91 c6 00 	lds	r24, 0x00C6
}
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
