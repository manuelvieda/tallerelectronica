
ControlDiplayExterno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800104  00800104  000005fc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000162  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000293  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000901  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000222  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d2  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	37 c0       	rjmp	.+110    	; 0x92 <__bad_interrupt>
  24:	09 c2       	rjmp	.+1042   	; 0x438 <__vector_18>
  26:	35 c0       	rjmp	.+106    	; 0x92 <__bad_interrupt>
  28:	35 c0       	rjmp	.+106    	; 0x94 <__vector_20>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <__bad_interrupt>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <__bad_interrupt>
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	2f c0       	rjmp	.+94     	; 0x92 <__bad_interrupt>
  34:	7c c0       	rjmp	.+248    	; 0x12e <darValor+0x18>
  36:	7d c0       	rjmp	.+250    	; 0x132 <darValor+0x1c>
  38:	7e c0       	rjmp	.+252    	; 0x136 <darValor+0x20>
  3a:	7f c0       	rjmp	.+254    	; 0x13a <darValor+0x24>
  3c:	80 c0       	rjmp	.+256    	; 0x13e <darValor+0x28>
  3e:	81 c0       	rjmp	.+258    	; 0x142 <darValor+0x2c>
  40:	82 c0       	rjmp	.+260    	; 0x146 <darValor+0x30>
  42:	83 c0       	rjmp	.+262    	; 0x14a <darValor+0x34>
  44:	84 c0       	rjmp	.+264    	; 0x14e <darValor+0x38>
  46:	71 c0       	rjmp	.+226    	; 0x12a <darValor+0x14>
  48:	c6 c1       	rjmp	.+908    	; 0x3d6 <testDisplay+0x222>
  4a:	b2 c1       	rjmp	.+868    	; 0x3b0 <testDisplay+0x1fc>
  4c:	9e c1       	rjmp	.+828    	; 0x38a <testDisplay+0x1d6>
  4e:	8a c1       	rjmp	.+788    	; 0x364 <testDisplay+0x1b0>
  50:	76 c1       	rjmp	.+748    	; 0x33e <testDisplay+0x18a>
  52:	62 c1       	rjmp	.+708    	; 0x318 <testDisplay+0x164>
  54:	4e c1       	rjmp	.+668    	; 0x2f2 <testDisplay+0x13e>
  56:	3a c1       	rjmp	.+628    	; 0x2cc <testDisplay+0x118>
  58:	26 c1       	rjmp	.+588    	; 0x2a6 <testDisplay+0xf2>
  5a:	10 c1       	rjmp	.+544    	; 0x27c <testDisplay+0xc8>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e6       	ldi	r30, 0x64	; 100
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	a4 30       	cpi	r26, 0x04	; 4
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a4 e0       	ldi	r26, 0x04	; 4
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 31       	cpi	r26, 0x11	; 17
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	c5 d1       	rcall	.+906    	; 0x41a <main>
  90:	67 c2       	rjmp	.+1230   	; 0x560 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <__vector_20>:

}


ISR(USART_TX_vect) 
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1

}
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <enviarDato>:
	HORA_DDR     |= _BV(PIN_DATO_HORA);

}


void enviarDato(uint8_t numero1, uint8_t numero2){
  a8:	48 2f       	mov	r20, r24
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	int i=0;
	for(i=0; i<8; i++){
		CLK_DATO_PORT &= ~(_BV(PIN_CLK_DATOS));
  b2:	44 98       	cbi	0x08, 4	; 8
		DATO1_PORT &= ~(_BV(PIN_DATO_DATOS1));
  b4:	43 98       	cbi	0x08, 3	; 8
		DATO2_PORT &= ~(_BV(PIN_DATO_DATOS2));
  b6:	42 98       	cbi	0x08, 2	; 8
		if(numero1&(_BV(i))){
  b8:	ca 01       	movw	r24, r20
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <enviarDato+0x1a>
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <enviarDato+0x16>
  c6:	80 fd       	sbrc	r24, 0
			DATO1_PORT |= _BV(PIN_DATO_DATOS1);
  c8:	43 9a       	sbi	0x08, 3	; 8
		}
		if(numero2&(_BV(i))){
  ca:	cb 01       	movw	r24, r22
  cc:	02 2e       	mov	r0, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <enviarDato+0x2c>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <enviarDato+0x28>
  d8:	80 fd       	sbrc	r24, 0
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
  da:	42 9a       	sbi	0x08, 2	; 8
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
  dc:	44 9a       	sbi	0x08, 4	; 8
}


void enviarDato(uint8_t numero1, uint8_t numero2){
	int i=0;
	for(i=0; i<8; i++){
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	31 05       	cpc	r19, r1
  e6:	29 f7       	brne	.-54     	; 0xb2 <enviarDato+0xa>
			DATO2_PORT |= _BV(PIN_DATO_DATOS2);
		}
		CLK_DATO_PORT |= _BV(PIN_CLK_DATOS);
	}

}
  e8:	08 95       	ret

000000ea <enviarHora>:

void enviarHora(uint8_t numero){
  ea:	48 2f       	mov	r20, r24
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0

	int i=0;
	for(i=0; i<8; i++){
		CLK_HORA_PORT &= ~(_BV(PIN_CLK_HORA));
  f2:	41 98       	cbi	0x08, 1	; 8
		HORA_PORT &= ~(_BV(PIN_DATO_HORA));
  f4:	40 98       	cbi	0x08, 0	; 8
		if(numero&(_BV(i))){
  f6:	ca 01       	movw	r24, r20
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <enviarHora+0x16>
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <enviarHora+0x12>
 104:	80 fd       	sbrc	r24, 0
			HORA_PORT |= _BV(PIN_DATO_HORA);
 106:	40 9a       	sbi	0x08, 0	; 8
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
 108:	41 9a       	sbi	0x08, 1	; 8
}

void enviarHora(uint8_t numero){

	int i=0;
	for(i=0; i<8; i++){
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	28 30       	cpi	r18, 0x08	; 8
 110:	31 05       	cpc	r19, r1
 112:	79 f7       	brne	.-34     	; 0xf2 <enviarHora+0x8>
			HORA_PORT |= _BV(PIN_DATO_HORA);
		}
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
	}

}
 114:	08 95       	ret

00000116 <darValor>:
}
uint8_t darValor(uint8_t num){

	uint8_t resp;

	switch(num){
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ea 30       	cpi	r30, 0x0A	; 10
 11c:	f1 05       	cpc	r31, r1
 11e:	10 f0       	brcs	.+4      	; 0x124 <darValor+0xe>
		case 9:
			resp = NUM9;
			break;
		case 0:
			resp = NUM0;
			break;
 120:	80 e0       	ldi	r24, 0x00	; 0
			resp = NUMOFF;
			break;
	}

	return resp;
}
 122:	08 95       	ret
}
uint8_t darValor(uint8_t num){

	uint8_t resp;

	switch(num){
 124:	e6 5e       	subi	r30, 0xE6	; 230
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	09 94       	ijmp
		case 7:
			resp = NUM7;
			break;
		case 8:
			resp = NUM8;
			break;
 12a:	86 ef       	ldi	r24, 0xF6	; 246
 12c:	08 95       	ret
		case 9:
			resp = NUM9;
			break;
 12e:	8e ee       	ldi	r24, 0xEE	; 238
 130:	08 95       	ret
}
uint8_t darValor(uint8_t num){

	uint8_t resp;

	switch(num){
 132:	82 e8       	ldi	r24, 0x82	; 130
 134:	08 95       	ret
 136:	8c ed       	ldi	r24, 0xDC	; 220
 138:	08 95       	ret
 13a:	86 ed       	ldi	r24, 0xD6	; 214
 13c:	08 95       	ret
		case 2:
			resp = NUM2;
			break;
		case 3:
			resp = NUM3;
			break;
 13e:	82 eb       	ldi	r24, 0xB2	; 178
 140:	08 95       	ret
		case 4:
			resp = NUM4;
			break;
 142:	86 e7       	ldi	r24, 0x76	; 118
 144:	08 95       	ret
		case 5:
			resp = NUM5;
			break;
 146:	8e e7       	ldi	r24, 0x7E	; 126
 148:	08 95       	ret
		case 6:
			resp = NUM6;
			break;
 14a:	82 ec       	ldi	r24, 0xC2	; 194
 14c:	08 95       	ret
		case 7:
			resp = NUM7;
			break;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	08 95       	ret

00000152 <actualizarInfo>:
		CLK_HORA_PORT |= (_BV(PIN_CLK_HORA));
	}

}

void actualizarInfo(){
 152:	1f 93       	push	r17

	enviarHora(darValor(display[6]));
 154:	80 91 0a 01 	lds	r24, 0x010A
 158:	de df       	rcall	.-68     	; 0x116 <darValor>
 15a:	c7 df       	rcall	.-114    	; 0xea <enviarHora>
	enviarHora(darValor(display[7]));
 15c:	80 91 0b 01 	lds	r24, 0x010B
 160:	da df       	rcall	.-76     	; 0x116 <darValor>
 162:	c3 df       	rcall	.-122    	; 0xea <enviarHora>
	enviarHora(darValor(display[8]));
 164:	80 91 0c 01 	lds	r24, 0x010C
 168:	d6 df       	rcall	.-84     	; 0x116 <darValor>
 16a:	bf df       	rcall	.-130    	; 0xea <enviarHora>
	enviarHora(darValor(display[9]));
 16c:	80 91 0d 01 	lds	r24, 0x010D
 170:	d2 df       	rcall	.-92     	; 0x116 <darValor>
 172:	bb df       	rcall	.-138    	; 0xea <enviarHora>


	enviarDato(darValor(display[0]), darValor(display[3]));
 174:	80 91 04 01 	lds	r24, 0x0104
 178:	ce df       	rcall	.-100    	; 0x116 <darValor>
 17a:	18 2f       	mov	r17, r24
 17c:	80 91 07 01 	lds	r24, 0x0107
 180:	ca df       	rcall	.-108    	; 0x116 <darValor>
 182:	68 2f       	mov	r22, r24
 184:	81 2f       	mov	r24, r17
 186:	90 df       	rcall	.-224    	; 0xa8 <enviarDato>
	enviarDato(darValor(display[1]), darValor(display[4]));
 188:	80 91 05 01 	lds	r24, 0x0105
 18c:	c4 df       	rcall	.-120    	; 0x116 <darValor>
 18e:	18 2f       	mov	r17, r24
 190:	80 91 08 01 	lds	r24, 0x0108
 194:	c0 df       	rcall	.-128    	; 0x116 <darValor>
 196:	68 2f       	mov	r22, r24
 198:	81 2f       	mov	r24, r17
 19a:	86 df       	rcall	.-244    	; 0xa8 <enviarDato>
	enviarDato(darValor(display[2]), darValor(display[5]));
 19c:	80 91 06 01 	lds	r24, 0x0106
 1a0:	ba df       	rcall	.-140    	; 0x116 <darValor>
 1a2:	18 2f       	mov	r17, r24
 1a4:	80 91 09 01 	lds	r24, 0x0109
 1a8:	b6 df       	rcall	.-148    	; 0x116 <darValor>
 1aa:	68 2f       	mov	r22, r24
 1ac:	81 2f       	mov	r24, r17
 1ae:	7c df       	rcall	.-264    	; 0xa8 <enviarDato>

}
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <testDisplay>:

	return resp;
}


void testDisplay(){
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c0:	c8 ec       	ldi	r28, 0xC8	; 200
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	28 ee       	ldi	r18, 0xE8	; 232
 1c6:	33 e0       	ldi	r19, 0x03	; 3
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <testDisplay+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	d1 f7       	brne	.-12     	; 0x1c8 <testDisplay+0x14>
 1d4:	28 ee       	ldi	r18, 0xE8	; 232
 1d6:	33 e0       	ldi	r19, 0x03	; 3
 1d8:	ce 01       	movw	r24, r28
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <testDisplay+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e2:	d1 f7       	brne	.-12     	; 0x1d8 <testDisplay+0x24>
 1e4:	28 ee       	ldi	r18, 0xE8	; 232
 1e6:	33 e0       	ldi	r19, 0x03	; 3
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <testDisplay+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	d1 f7       	brne	.-12     	; 0x1e8 <testDisplay+0x34>
 1f4:	28 ee       	ldi	r18, 0xE8	; 232
 1f6:	33 e0       	ldi	r19, 0x03	; 3
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <testDisplay+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 202:	d1 f7       	brne	.-12     	; 0x1f8 <testDisplay+0x44>
 204:	28 ee       	ldi	r18, 0xE8	; 232
 206:	33 e0       	ldi	r19, 0x03	; 3
 208:	ce 01       	movw	r24, r28
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <testDisplay+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 212:	d1 f7       	brne	.-12     	; 0x208 <testDisplay+0x54>
 214:	28 ee       	ldi	r18, 0xE8	; 232
 216:	33 e0       	ldi	r19, 0x03	; 3
 218:	ce 01       	movw	r24, r28
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <testDisplay+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 222:	d1 f7       	brne	.-12     	; 0x218 <testDisplay+0x64>
 224:	28 ee       	ldi	r18, 0xE8	; 232
 226:	33 e0       	ldi	r19, 0x03	; 3
 228:	ce 01       	movw	r24, r28
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <testDisplay+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 232:	d1 f7       	brne	.-12     	; 0x228 <testDisplay+0x74>
 234:	28 ee       	ldi	r18, 0xE8	; 232
 236:	33 e0       	ldi	r19, 0x03	; 3
 238:	ce 01       	movw	r24, r28
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <testDisplay+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	d1 f7       	brne	.-12     	; 0x238 <testDisplay+0x84>
 244:	28 ee       	ldi	r18, 0xE8	; 232
 246:	33 e0       	ldi	r19, 0x03	; 3
 248:	ce 01       	movw	r24, r28
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <testDisplay+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 252:	d1 f7       	brne	.-12     	; 0x248 <testDisplay+0x94>
 254:	28 ee       	ldi	r18, 0xE8	; 232
 256:	33 e0       	ldi	r19, 0x03	; 3
 258:	ce 01       	movw	r24, r28
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <testDisplay+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 262:	d1 f7       	brne	.-12     	; 0x258 <testDisplay+0xa4>
	int i =0;
	while(1)
	{
		SEG1

		switch(i++){
 264:	8f 01       	movw	r16, r30
 266:	0f 5f       	subi	r16, 0xFF	; 255
 268:	1f 4f       	sbci	r17, 0xFF	; 255
 26a:	ea 30       	cpi	r30, 0x0A	; 10
 26c:	f1 05       	cpc	r31, r1
 26e:	18 f0       	brcs	.+6      	; 0x276 <testDisplay+0xc2>
 270:	e0 e0       	ldi	r30, 0x00	; 0
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	a7 cf       	rjmp	.-178    	; 0x1c4 <testDisplay+0x10>
 276:	ec 5d       	subi	r30, 0xDC	; 220
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	09 94       	ijmp
				enviarDato(NUM8, NUM8);
				enviarDato(NUM8, NUM8);
				break;

			case 9:
				enviarHora(NUM9);
 27c:	86 ef       	ldi	r24, 0xF6	; 246
 27e:	35 df       	rcall	.-406    	; 0xea <enviarHora>
				enviarHora(NUM9);
 280:	86 ef       	ldi	r24, 0xF6	; 246
 282:	33 df       	rcall	.-410    	; 0xea <enviarHora>
				enviarHora(NUM9);
 284:	86 ef       	ldi	r24, 0xF6	; 246
 286:	31 df       	rcall	.-414    	; 0xea <enviarHora>
				enviarHora(NUM9);
 288:	86 ef       	ldi	r24, 0xF6	; 246
 28a:	2f df       	rcall	.-418    	; 0xea <enviarHora>
				enviarDato(NUM9, NUM9);
 28c:	86 ef       	ldi	r24, 0xF6	; 246
 28e:	66 ef       	ldi	r22, 0xF6	; 246
 290:	0b df       	rcall	.-490    	; 0xa8 <enviarDato>
				enviarDato(NUM9, NUM9);
 292:	86 ef       	ldi	r24, 0xF6	; 246
 294:	66 ef       	ldi	r22, 0xF6	; 246
 296:	08 df       	rcall	.-496    	; 0xa8 <enviarDato>
				enviarDato(NUM9, NUM9);
 298:	86 ef       	ldi	r24, 0xF6	; 246
 29a:	66 ef       	ldi	r22, 0xF6	; 246
 29c:	05 df       	rcall	.-502    	; 0xa8 <enviarDato>
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0

	return resp;
}


void testDisplay(){
 2a2:	f8 01       	movw	r30, r16
 2a4:	8f cf       	rjmp	.-226    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM7, NUM7);
				enviarDato(NUM7, NUM7);
				break;
			
			case 8:
				enviarHora(NUM8);
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	20 df       	rcall	.-448    	; 0xea <enviarHora>
				enviarHora(NUM8);
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	1e df       	rcall	.-452    	; 0xea <enviarHora>
				enviarHora(NUM8);
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	1c df       	rcall	.-456    	; 0xea <enviarHora>
				enviarHora(NUM8);
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	1a df       	rcall	.-460    	; 0xea <enviarHora>
				enviarDato(NUM8, NUM8);
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	6f ef       	ldi	r22, 0xFF	; 255
 2ba:	f6 de       	rcall	.-532    	; 0xa8 <enviarDato>
				enviarDato(NUM8, NUM8);
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	6f ef       	ldi	r22, 0xFF	; 255
 2c0:	f3 de       	rcall	.-538    	; 0xa8 <enviarDato>
				enviarDato(NUM8, NUM8);
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	6f ef       	ldi	r22, 0xFF	; 255
 2c6:	f0 de       	rcall	.-544    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 2c8:	f8 01       	movw	r30, r16
 2ca:	7c cf       	rjmp	.-264    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM6, NUM6);
				enviarDato(NUM6, NUM6);
				enviarDato(NUM6, NUM6);
				break;
			case 7:
				enviarHora(NUM7);
 2cc:	82 ec       	ldi	r24, 0xC2	; 194
 2ce:	0d df       	rcall	.-486    	; 0xea <enviarHora>
				enviarHora(NUM7);
 2d0:	82 ec       	ldi	r24, 0xC2	; 194
 2d2:	0b df       	rcall	.-490    	; 0xea <enviarHora>
				enviarHora(NUM7);
 2d4:	82 ec       	ldi	r24, 0xC2	; 194
 2d6:	09 df       	rcall	.-494    	; 0xea <enviarHora>
				enviarHora(NUM7);
 2d8:	82 ec       	ldi	r24, 0xC2	; 194
 2da:	07 df       	rcall	.-498    	; 0xea <enviarHora>
				enviarDato(NUM7, NUM7);
 2dc:	82 ec       	ldi	r24, 0xC2	; 194
 2de:	62 ec       	ldi	r22, 0xC2	; 194
 2e0:	e3 de       	rcall	.-570    	; 0xa8 <enviarDato>
				enviarDato(NUM7, NUM7);
 2e2:	82 ec       	ldi	r24, 0xC2	; 194
 2e4:	62 ec       	ldi	r22, 0xC2	; 194
 2e6:	e0 de       	rcall	.-576    	; 0xa8 <enviarDato>
				enviarDato(NUM7, NUM7);
 2e8:	82 ec       	ldi	r24, 0xC2	; 194
 2ea:	62 ec       	ldi	r22, 0xC2	; 194
 2ec:	dd de       	rcall	.-582    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 2ee:	f8 01       	movw	r30, r16
 2f0:	69 cf       	rjmp	.-302    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM5, NUM5);
				enviarDato(NUM5, NUM5);
				enviarDato(NUM5, NUM5);
				break;
			case 6:
				enviarHora(NUM6);
 2f2:	8e e7       	ldi	r24, 0x7E	; 126
 2f4:	fa de       	rcall	.-524    	; 0xea <enviarHora>
				enviarHora(NUM6);
 2f6:	8e e7       	ldi	r24, 0x7E	; 126
 2f8:	f8 de       	rcall	.-528    	; 0xea <enviarHora>
				enviarHora(NUM6);
 2fa:	8e e7       	ldi	r24, 0x7E	; 126
 2fc:	f6 de       	rcall	.-532    	; 0xea <enviarHora>
				enviarHora(NUM6);
 2fe:	8e e7       	ldi	r24, 0x7E	; 126
 300:	f4 de       	rcall	.-536    	; 0xea <enviarHora>
				enviarDato(NUM6, NUM6);
 302:	8e e7       	ldi	r24, 0x7E	; 126
 304:	6e e7       	ldi	r22, 0x7E	; 126
 306:	d0 de       	rcall	.-608    	; 0xa8 <enviarDato>
				enviarDato(NUM6, NUM6);
 308:	8e e7       	ldi	r24, 0x7E	; 126
 30a:	6e e7       	ldi	r22, 0x7E	; 126
 30c:	cd de       	rcall	.-614    	; 0xa8 <enviarDato>
				enviarDato(NUM6, NUM6);
 30e:	8e e7       	ldi	r24, 0x7E	; 126
 310:	6e e7       	ldi	r22, 0x7E	; 126
 312:	ca de       	rcall	.-620    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 314:	f8 01       	movw	r30, r16
 316:	56 cf       	rjmp	.-340    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM4, NUM4);
				enviarDato(NUM4, NUM4);
				enviarDato(NUM4, NUM4);
				break;
			case 5:
				enviarHora(NUM5);
 318:	86 e7       	ldi	r24, 0x76	; 118
 31a:	e7 de       	rcall	.-562    	; 0xea <enviarHora>
				enviarHora(NUM5);
 31c:	86 e7       	ldi	r24, 0x76	; 118
 31e:	e5 de       	rcall	.-566    	; 0xea <enviarHora>
				enviarHora(NUM5);
 320:	86 e7       	ldi	r24, 0x76	; 118
 322:	e3 de       	rcall	.-570    	; 0xea <enviarHora>
				enviarHora(NUM5);
 324:	86 e7       	ldi	r24, 0x76	; 118
 326:	e1 de       	rcall	.-574    	; 0xea <enviarHora>
				enviarDato(NUM5, NUM5);
 328:	86 e7       	ldi	r24, 0x76	; 118
 32a:	66 e7       	ldi	r22, 0x76	; 118
 32c:	bd de       	rcall	.-646    	; 0xa8 <enviarDato>
				enviarDato(NUM5, NUM5);
 32e:	86 e7       	ldi	r24, 0x76	; 118
 330:	66 e7       	ldi	r22, 0x76	; 118
 332:	ba de       	rcall	.-652    	; 0xa8 <enviarDato>
				enviarDato(NUM5, NUM5);
 334:	86 e7       	ldi	r24, 0x76	; 118
 336:	66 e7       	ldi	r22, 0x76	; 118
 338:	b7 de       	rcall	.-658    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 33a:	f8 01       	movw	r30, r16
 33c:	43 cf       	rjmp	.-378    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM3, NUM3);
				enviarDato(NUM3, NUM3);
				enviarDato(NUM3, NUM3);
				break;
			case 4:
				enviarHora(NUM4);
 33e:	82 eb       	ldi	r24, 0xB2	; 178
 340:	d4 de       	rcall	.-600    	; 0xea <enviarHora>
				enviarHora(NUM4);
 342:	82 eb       	ldi	r24, 0xB2	; 178
 344:	d2 de       	rcall	.-604    	; 0xea <enviarHora>
				enviarHora(NUM4);
 346:	82 eb       	ldi	r24, 0xB2	; 178
 348:	d0 de       	rcall	.-608    	; 0xea <enviarHora>
				enviarHora(NUM4);
 34a:	82 eb       	ldi	r24, 0xB2	; 178
 34c:	ce de       	rcall	.-612    	; 0xea <enviarHora>
				enviarDato(NUM4, NUM4);
 34e:	82 eb       	ldi	r24, 0xB2	; 178
 350:	62 eb       	ldi	r22, 0xB2	; 178
 352:	aa de       	rcall	.-684    	; 0xa8 <enviarDato>
				enviarDato(NUM4, NUM4);
 354:	82 eb       	ldi	r24, 0xB2	; 178
 356:	62 eb       	ldi	r22, 0xB2	; 178
 358:	a7 de       	rcall	.-690    	; 0xa8 <enviarDato>
				enviarDato(NUM4, NUM4);
 35a:	82 eb       	ldi	r24, 0xB2	; 178
 35c:	62 eb       	ldi	r22, 0xB2	; 178
 35e:	a4 de       	rcall	.-696    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 360:	f8 01       	movw	r30, r16
 362:	30 cf       	rjmp	.-416    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM2, NUM2);
				enviarDato(NUM2, NUM2);
				enviarDato(NUM2, NUM2);
				break;
			case 3:
				enviarHora(NUM3);
 364:	86 ed       	ldi	r24, 0xD6	; 214
 366:	c1 de       	rcall	.-638    	; 0xea <enviarHora>
				enviarHora(NUM3);
 368:	86 ed       	ldi	r24, 0xD6	; 214
 36a:	bf de       	rcall	.-642    	; 0xea <enviarHora>
				enviarHora(NUM3);
 36c:	86 ed       	ldi	r24, 0xD6	; 214
 36e:	bd de       	rcall	.-646    	; 0xea <enviarHora>
				enviarHora(NUM3);
 370:	86 ed       	ldi	r24, 0xD6	; 214
 372:	bb de       	rcall	.-650    	; 0xea <enviarHora>
				enviarDato(NUM3, NUM3);
 374:	86 ed       	ldi	r24, 0xD6	; 214
 376:	66 ed       	ldi	r22, 0xD6	; 214
 378:	97 de       	rcall	.-722    	; 0xa8 <enviarDato>
				enviarDato(NUM3, NUM3);
 37a:	86 ed       	ldi	r24, 0xD6	; 214
 37c:	66 ed       	ldi	r22, 0xD6	; 214
 37e:	94 de       	rcall	.-728    	; 0xa8 <enviarDato>
				enviarDato(NUM3, NUM3);
 380:	86 ed       	ldi	r24, 0xD6	; 214
 382:	66 ed       	ldi	r22, 0xD6	; 214
 384:	91 de       	rcall	.-734    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 386:	f8 01       	movw	r30, r16
 388:	1d cf       	rjmp	.-454    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM1, NUM1);
				enviarDato(NUM1, NUM1);
				enviarDato(NUM1, NUM1);
				break;
			case 2:
				enviarHora(NUM2);
 38a:	8c ed       	ldi	r24, 0xDC	; 220
 38c:	ae de       	rcall	.-676    	; 0xea <enviarHora>
				enviarHora(NUM2);
 38e:	8c ed       	ldi	r24, 0xDC	; 220
 390:	ac de       	rcall	.-680    	; 0xea <enviarHora>
				enviarHora(NUM2);
 392:	8c ed       	ldi	r24, 0xDC	; 220
 394:	aa de       	rcall	.-684    	; 0xea <enviarHora>
				enviarHora(NUM2);
 396:	8c ed       	ldi	r24, 0xDC	; 220
 398:	a8 de       	rcall	.-688    	; 0xea <enviarHora>
				enviarDato(NUM2, NUM2);
 39a:	8c ed       	ldi	r24, 0xDC	; 220
 39c:	6c ed       	ldi	r22, 0xDC	; 220
 39e:	84 de       	rcall	.-760    	; 0xa8 <enviarDato>
				enviarDato(NUM2, NUM2);
 3a0:	8c ed       	ldi	r24, 0xDC	; 220
 3a2:	6c ed       	ldi	r22, 0xDC	; 220
 3a4:	81 de       	rcall	.-766    	; 0xa8 <enviarDato>
				enviarDato(NUM2, NUM2);
 3a6:	8c ed       	ldi	r24, 0xDC	; 220
 3a8:	6c ed       	ldi	r22, 0xDC	; 220
 3aa:	7e de       	rcall	.-772    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 3ac:	f8 01       	movw	r30, r16
 3ae:	0a cf       	rjmp	.-492    	; 0x1c4 <testDisplay+0x10>
				enviarDato(NUM0, NUM0);
				enviarDato(NUM0, NUM0);
				enviarDato(NUM0, NUM0);
				break;
			case 1:
				enviarHora(NUM1);
 3b0:	82 e8       	ldi	r24, 0x82	; 130
 3b2:	9b de       	rcall	.-714    	; 0xea <enviarHora>
				enviarHora(NUM1);
 3b4:	82 e8       	ldi	r24, 0x82	; 130
 3b6:	99 de       	rcall	.-718    	; 0xea <enviarHora>
				enviarHora(NUM1);
 3b8:	82 e8       	ldi	r24, 0x82	; 130
 3ba:	97 de       	rcall	.-722    	; 0xea <enviarHora>
				enviarHora(NUM1);
 3bc:	82 e8       	ldi	r24, 0x82	; 130
 3be:	95 de       	rcall	.-726    	; 0xea <enviarHora>
				enviarDato(NUM1, NUM1);
 3c0:	82 e8       	ldi	r24, 0x82	; 130
 3c2:	62 e8       	ldi	r22, 0x82	; 130
 3c4:	71 de       	rcall	.-798    	; 0xa8 <enviarDato>
				enviarDato(NUM1, NUM1);
 3c6:	82 e8       	ldi	r24, 0x82	; 130
 3c8:	62 e8       	ldi	r22, 0x82	; 130
 3ca:	6e de       	rcall	.-804    	; 0xa8 <enviarDato>
				enviarDato(NUM1, NUM1);
 3cc:	82 e8       	ldi	r24, 0x82	; 130
 3ce:	62 e8       	ldi	r22, 0x82	; 130
 3d0:	6b de       	rcall	.-810    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 3d2:	f8 01       	movw	r30, r16
 3d4:	f7 ce       	rjmp	.-530    	; 0x1c4 <testDisplay+0x10>
	{
		SEG1

		switch(i++){
			case 0:
				enviarHora(NUM0);
 3d6:	8e ee       	ldi	r24, 0xEE	; 238
 3d8:	88 de       	rcall	.-752    	; 0xea <enviarHora>
				enviarHora(NUM0);
 3da:	8e ee       	ldi	r24, 0xEE	; 238
 3dc:	86 de       	rcall	.-756    	; 0xea <enviarHora>
				enviarHora(NUM0);
 3de:	8e ee       	ldi	r24, 0xEE	; 238
 3e0:	84 de       	rcall	.-760    	; 0xea <enviarHora>
				enviarHora(NUM0);
 3e2:	8e ee       	ldi	r24, 0xEE	; 238
 3e4:	82 de       	rcall	.-764    	; 0xea <enviarHora>
				enviarDato(NUM0, NUM0);
 3e6:	8e ee       	ldi	r24, 0xEE	; 238
 3e8:	6e ee       	ldi	r22, 0xEE	; 238
 3ea:	5e de       	rcall	.-836    	; 0xa8 <enviarDato>
				enviarDato(NUM0, NUM0);
 3ec:	8e ee       	ldi	r24, 0xEE	; 238
 3ee:	6e ee       	ldi	r22, 0xEE	; 238
 3f0:	5b de       	rcall	.-842    	; 0xa8 <enviarDato>
				enviarDato(NUM0, NUM0);
 3f2:	8e ee       	ldi	r24, 0xEE	; 238
 3f4:	6e ee       	ldi	r22, 0xEE	; 238
 3f6:	58 de       	rcall	.-848    	; 0xa8 <enviarDato>

	return resp;
}


void testDisplay(){
 3f8:	f8 01       	movw	r30, r16
 3fa:	e4 ce       	rjmp	.-568    	; 0x1c4 <testDisplay+0x10>

000003fc <initHardware>:
 * @POST:   Se inicializa el hardware. Listo para uso rutinario
 * @RETURN: Void
 */
void initHardware(){
	
	USART0_init();
 3fc:	63 d0       	rcall	.+198    	; 0x4c4 <USART0_init>
	USART0_EnableRx();
 3fe:	83 d0       	rcall	.+262    	; 0x506 <USART0_EnableRx>
	USART0_EnableTx();
 400:	76 d0       	rcall	.+236    	; 0x4ee <USART0_EnableTx>

	USART0_Enviar('A');
 402:	81 e4       	ldi	r24, 0x41	; 65
 404:	8c d0       	rcall	.+280    	; 0x51e <USART0_Enviar>
	USART0_Enviar('b');
 406:	82 e6       	ldi	r24, 0x62	; 98
 408:	8a d0       	rcall	.+276    	; 0x51e <USART0_Enviar>
	USART0_Enviar('c');
 40a:	83 e6       	ldi	r24, 0x63	; 99
 40c:	88 d0       	rcall	.+272    	; 0x51e <USART0_Enviar>

	
	//Inicializamos puerto para datos del display
	CLK_DATO_DDR |= _BV(PIN_CLK_DATOS);
 40e:	3c 9a       	sbi	0x07, 4	; 7
	CLK_HORA_DDR |= _BV(PIN_CLK_HORA);
 410:	39 9a       	sbi	0x07, 1	; 7
	DATO1_DDR    |= _BV(PIN_DATO_DATOS1);
 412:	3b 9a       	sbi	0x07, 3	; 7
	DATO2_DDR    |= _BV(PIN_DATO_DATOS2);
 414:	3a 9a       	sbi	0x07, 2	; 7
	HORA_DDR     |= _BV(PIN_DATO_HORA);
 416:	38 9a       	sbi	0x07, 0	; 7

}
 418:	08 95       	ret

0000041a <main>:

//  ------------------------------------------------------------------------
//	PROGRAMA PRINCIPAL DEL SISITEMA
//  ------------------------------------------------------------------------

int main(void) {
 41a:	20 e9       	ldi	r18, 0x90	; 144
 41c:	31 e0       	ldi	r19, 0x01	; 1
 41e:	48 ec       	ldi	r20, 0xC8	; 200
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	ca 01       	movw	r24, r20
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <main+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42c:	d1 f7       	brne	.-12     	; 0x422 <main+0x8>

	_delay_ms(40);
	estado = 0x00;
 42e:	10 92 10 01 	sts	0x0110, r1
	initHardware();
 432:	e4 df       	rcall	.-56     	; 0x3fc <initHardware>
	sei();	// Enable the Global Interrupt Enable flag so that interrupts can be processed
 434:	78 94       	sei
 436:	ff cf       	rjmp	.-2      	; 0x436 <main+0x1c>

00000438 <__vector_18>:

/**
 *  Manejo de la interrupcion generada cuando la USART0 recibe un dato
 */
ISR(USART_RX_vect) 
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	2f 93       	push	r18
 444:	3f 93       	push	r19
 446:	4f 93       	push	r20
 448:	5f 93       	push	r21
 44a:	6f 93       	push	r22
 44c:	7f 93       	push	r23
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	af 93       	push	r26
 454:	bf 93       	push	r27
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31

	static int i;
	uint8_t dato;
	dato = USART0_Recibir();
 45a:	69 d0       	rcall	.+210    	; 0x52e <USART0_Recibir>
 45c:	28 2f       	mov	r18, r24

	if(dato=='A'){
 45e:	81 34       	cpi	r24, 0x41	; 65
 460:	19 f1       	breq	.+70     	; 0x4a8 <__vector_18+0x70>
		i=0;
	} else{

		if(i<10){
 462:	80 91 0e 01 	lds	r24, 0x010E
 466:	90 91 0f 01 	lds	r25, 0x010F
 46a:	8a 30       	cpi	r24, 0x0A	; 10
 46c:	91 05       	cpc	r25, r1
 46e:	5c f4       	brge	.+22     	; 0x486 <__vector_18+0x4e>
			display[i++] = dato;
 470:	fc 01       	movw	r30, r24
 472:	ec 5f       	subi	r30, 0xFC	; 252
 474:	fe 4f       	sbci	r31, 0xFE	; 254
 476:	20 83       	st	Z, r18
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	90 93 0f 01 	sts	0x010F, r25
 47e:	80 93 0e 01 	sts	0x010E, r24
			if(i==10){
 482:	0a 97       	sbiw	r24, 0x0a	; 10
 484:	b1 f0       	breq	.+44     	; 0x4b2 <__vector_18+0x7a>
		}
	}

	

}
 486:	ff 91       	pop	r31
 488:	ef 91       	pop	r30
 48a:	bf 91       	pop	r27
 48c:	af 91       	pop	r26
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	7f 91       	pop	r23
 494:	6f 91       	pop	r22
 496:	5f 91       	pop	r21
 498:	4f 91       	pop	r20
 49a:	3f 91       	pop	r19
 49c:	2f 91       	pop	r18
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti
	static int i;
	uint8_t dato;
	dato = USART0_Recibir();

	if(dato=='A'){
		i=0;
 4a8:	10 92 0f 01 	sts	0x010F, r1
 4ac:	10 92 0e 01 	sts	0x010E, r1
 4b0:	ea cf       	rjmp	.-44     	; 0x486 <__vector_18+0x4e>
	} else{

		if(i<10){
			display[i++] = dato;
			if(i==10){
				actualizarInfo();
 4b2:	4f de       	rcall	.-866    	; 0x152 <actualizarInfo>
				USART0_EnviarLn("Ok");
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	71 e0       	ldi	r23, 0x01	; 1
 4bc:	3f d0       	rcall	.+126    	; 0x53c <USART0_EnviarStrLen>
 4be:	8d e0       	ldi	r24, 0x0D	; 13
 4c0:	2e d0       	rcall	.+92     	; 0x51e <USART0_Enviar>
 4c2:	e1 cf       	rjmp	.-62     	; 0x486 <__vector_18+0x4e>

000004c4 <USART0_init>:
 * @RETURN: Void
 */
void USART0_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSR0A = 0x20;
 4c4:	80 e2       	ldi	r24, 0x20	; 32
 4c6:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x00;
 4ca:	e1 ec       	ldi	r30, 0xC1	; 193
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	10 82       	st	Z, r1
	UCSR0C = 0x06;
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	80 93 c2 00 	sts	0x00C2, r24
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRR0L=UBRRVAL;			//Parte baja del byte
 4d6:	83 e3       	ldi	r24, 0x33	; 51
 4d8:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=(UBRRVAL>>8);	//Parte alta del byte
 4dc:	10 92 c5 00 	sts	0x00C5, r1
		case 7: UCSR0C &= ~(_BV(UCSZ00));break;
		case 9: UCSR0B|= _BV(UCSZ02);break;
		default:break;
	}

	UCSR0B |= (INT_TX_COMPLETA)?_BV(TXCIE0):0;
 4e0:	80 81       	ld	r24, Z
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	80 83       	st	Z, r24
	UCSR0B |= (INT_RX_COMPLETA)?_BV(RXCIE0):0;
 4e6:	80 81       	ld	r24, Z
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	80 83       	st	Z, r24
		default: break;
	}

	if(NUM_STOP==2) UCSR0C |= _BV(USBS0);
	if(CLK_POL) UCSR0C |= _BV(UCPOL0);
}
 4ec:	08 95       	ret

000004ee <USART0_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART0_EnableTx(){
	UCSR0B |= _BV(TXEN0);
 4ee:	e1 ec       	ldi	r30, 0xC1	; 193
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	88 60       	ori	r24, 0x08	; 8
 4f6:	80 83       	st	Z, r24
}
 4f8:	08 95       	ret

000004fa <USART0_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART0_DisableTx(){
	UCSR0B &= ~_BV(TXEN0);
 4fa:	e1 ec       	ldi	r30, 0xC1	; 193
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	87 7f       	andi	r24, 0xF7	; 247
 502:	80 83       	st	Z, r24
}
 504:	08 95       	ret

00000506 <USART0_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART0_EnableRx(){
	UCSR0B |= _BV(RXEN0);
 506:	e1 ec       	ldi	r30, 0xC1	; 193
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	80 61       	ori	r24, 0x10	; 16
 50e:	80 83       	st	Z, r24
}
 510:	08 95       	ret

00000512 <USART0_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART0_DisableRx(){
 	UCSR0B &= ~_BV(RXEN0);
 512:	e1 ec       	ldi	r30, 0xC1	; 193
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	8f 7e       	andi	r24, 0xEF	; 239
 51a:	80 83       	st	Z, r24
 }
 51c:	08 95       	ret

0000051e <USART0_Enviar>:
  * @PARAMS uint8_t dato -> Dato que se desea enviar
  * @PRE:   El puerto USART0 se encuentra configurado y habilitado para el envio de mensajes+
  * @POST:  Se coloca el mensaje en el buffer de salida de la USART0
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){
 51e:	98 2f       	mov	r25, r24

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 520:	80 91 c0 00 	lds	r24, 0x00C0
 524:	85 ff       	sbrs	r24, 5
 526:	fc cf       	rjmp	.-8      	; 0x520 <USART0_Enviar+0x2>

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 528:	90 93 c6 00 	sts	0x00C6, r25

}
 52c:	08 95       	ret

0000052e <USART0_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART0_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSR0A & (1<<RXC0)) );
 52e:	80 91 c0 00 	lds	r24, 0x00C0
 532:	87 ff       	sbrs	r24, 7
 534:	fc cf       	rjmp	.-8      	; 0x52e <USART0_Recibir>

	return UDR0;
 536:	80 91 c6 00 	lds	r24, 0x00C6
}
 53a:	08 95       	ret

0000053c <USART0_EnviarStrLen>:


void USART0_EnviarStrLen(int len, char *buf){
 53c:	9c 01       	movw	r18, r24
 53e:	fb 01       	movw	r30, r22

	for (; len > 0; len--){
 540:	18 16       	cp	r1, r24
 542:	19 06       	cpc	r1, r25
 544:	64 f4       	brge	.+24     	; 0x55e <USART0_EnviarStrLen+0x22>
		USART0_Enviar(*buf++);
 546:	91 91       	ld	r25, Z+
  * @RETURN: Void
  */
void USART0_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 548:	80 91 c0 00 	lds	r24, 0x00C0
 54c:	85 ff       	sbrs	r24, 5
 54e:	fc cf       	rjmp	.-8      	; 0x548 <USART0_EnviarStrLen+0xc>

	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 550:	90 93 c6 00 	sts	0x00C6, r25
}


void USART0_EnviarStrLen(int len, char *buf){

	for (; len > 0; len--){
 554:	21 50       	subi	r18, 0x01	; 1
 556:	30 40       	sbci	r19, 0x00	; 0
 558:	12 16       	cp	r1, r18
 55a:	13 06       	cpc	r1, r19
 55c:	a4 f3       	brlt	.-24     	; 0x546 <USART0_EnviarStrLen+0xa>
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
