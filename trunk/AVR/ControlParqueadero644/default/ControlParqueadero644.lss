
ControlParqueadero644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000538  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000060  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a8  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000005b4  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002be  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000071e  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e7  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000141  00000000  00000000  000018cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  80:	0c 94 9a 02 	jmp	0x534	; 0x534 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <initHardware>:
 * @RETURN: Void
 */
void initHardware(){

	// Inicializamos el LCD
	LCD_init();
  88:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_init>

	// Inicializamos el Teclado Matricial
	KBR_DDR  = 0x0F; 
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	8a b9       	out	0x0a, r24	; 10
	KBR_PORT = 0x00;
  90:	1b b8       	out	0x0b, r1	; 11
	// Inicializamos Puerto Serial Sincrono (USART-1) para comunicación con micro alterno

	// Inicializamos Puerto Serial Asincrono (UART-0) para modulo RF
	

}
  92:	08 95       	ret

00000094 <main>:

//  ------------------------------------------------------------------------
//	PROGRAMA PRINCIPAL DEL SISITEMA
//  ------------------------------------------------------------------------

int main(void) {
  94:	80 e9       	ldi	r24, 0x90	; 144
  96:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	28 ec       	ldi	r18, 0xC8	; 200
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x8>


	_delay_ms(40);
	initHardware();
  a6:	0e 94 44 00 	call	0x88	; 0x88 <initHardware>
	
	

	//LCD_enviarDTA('E');LCD_esperarListo();

	LCD_linea1Pos0();
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
	LCD_esperarListo();
  b2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
  be:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
  ca:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
  d6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
  e2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
  ee:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
  fa:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 106:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 112:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 11e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 12a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 136:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 142:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 14e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 15a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 166:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 172:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>


	LCD_linea2Pos0(); LCD_esperarListo();
 176:	80 ec       	ldi	r24, 0xC0	; 192
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 17e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 18a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 196:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1a2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1ae:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1ba:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1c6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1d2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1de:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1ea:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 1f6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 202:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 20e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 21a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 226:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 232:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 23e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 24a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>





	LCD_linea3Pos0(); LCD_esperarListo();
 24e:	84 e9       	ldi	r24, 0x94	; 148
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 256:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
		LCD_enviarDTA(' ');LCD_esperarListo();
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 262:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 26e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 27a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 286:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 292:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 29e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2aa:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2b6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2c2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2ce:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2da:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2e6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2f2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 2fe:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 30a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 316:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 322:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>




	LCD_linea4Pos0(); LCD_esperarListo();
 326:	84 ed       	ldi	r24, 0xD4	; 212
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 32e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
		LCD_enviarDTA(' ');LCD_esperarListo();
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 33a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 346:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 352:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 35e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 362:	80 e2       	ldi	r24, 0x20	; 32
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 36a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 376:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 382:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 38e:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 39a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 39e:	80 e2       	ldi	r24, 0x20	; 32
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3a6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3b2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(' ');LCD_esperarListo();
 3b6:	80 e2       	ldi	r24, 0x20	; 32
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3be:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3ca:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3d6:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3e2:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarDTA(0xFF);LCD_esperarListo();
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
 3ee:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <main+0x35e>

000003f4 <LCD_enviarNibble>:
 *			uint8_t rs -> Selector de registro LCD (1:Instruccion, 0:Dato)
 * @PRE: n y rs se encuentran bien definidos
 * @POS: Se envian los datos al LCD
 * @Return: Void
 */
static void LCD_enviarNibble(uint8_t n, uint8_t rs){
 3f4:	98 2f       	mov	r25, r24

	LCD_CMD_PORT_OUT &= ~_BV(LCD_RW);
 3f6:	12 98       	cbi	0x02, 2	; 2

	if (rs)
 3f8:	66 23       	and	r22, r22
 3fa:	11 f0       	breq	.+4      	; 0x400 <LCD_enviarNibble+0xc>
		LCD_CMD_PORT_OUT |= _BV(LCD_RS);
 3fc:	11 9a       	sbi	0x02, 1	; 2
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <LCD_enviarNibble+0xe>
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
 400:	11 98       	cbi	0x02, 1	; 2
	
	LCD_DTA_PORT_OUT &= ~LCD_DTA_BITS;
 402:	82 b1       	in	r24, 0x02	; 2
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	82 b9       	out	0x02, r24	; 2
	LCD_DTA_PORT_OUT |= (n<<LCD_D4) & LCD_DTA_BITS;
 408:	82 b1       	in	r24, 0x02	; 2
 40a:	92 95       	swap	r25
 40c:	90 7f       	andi	r25, 0xF0	; 240
 40e:	89 2b       	or	r24, r25
 410:	82 b9       	out	0x02, r24	; 2

static inline uint8_t LCD_pulsoEnable(bool lectura){
	
	uint8_t dato;
	
	LCD_CMD_PORT_OUT |= _BV(LCD_E);
 412:	13 9a       	sbi	0x02, 3	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <LCD_enviarNibble+0x22>
	if(lectura)
		dato = LCD_DTA_PORT_IN & LCD_DTA_BITS;
	else
		dato = 0x00;

	LCD_CMD_PORT_OUT &= ~_BV(LCD_E);
 41a:	13 98       	cbi	0x02, 3	; 2
	
	LCD_DTA_PORT_OUT &= ~LCD_DTA_BITS;
	LCD_DTA_PORT_OUT |= (n<<LCD_D4) & LCD_DTA_BITS;
	//LCD_DTA_PORT_OUT |= ((n<<LCD_D4)& LCD_DTA_BITS);
	(void)LCD_pulsoEnable(false);
}
 41c:	08 95       	ret

0000041e <LCD_enviarByte>:
 * @PRE: Los parametros se encuentran bien definidos
 * @POS: Se envian dos nibbles para completar el dato/instruccion en el controlador del LCD
 * @RETURN: Void
 */

void LCD_enviarByte(uint8_t by, uint8_t rs){
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	18 2f       	mov	r17, r24
 424:	06 2f       	mov	r16, r22

	LCD_enviarNibble(by>>4, rs);		// Enviamos la parte alta b[7..4]
 426:	82 95       	swap	r24
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_enviarNibble>
	LCD_enviarNibble(by & 0x0F, rs);	// Enviamos la parte baja b[3..0]
 42e:	81 2f       	mov	r24, r17
 430:	8f 70       	andi	r24, 0x0F	; 15
 432:	60 2f       	mov	r22, r16
 434:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_enviarNibble>
}
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <LCD_recibirNibble>:
 */
static uint8_t LCD_recibirNibble(uint8_t rs){
	
	uint8_t dato;

	LCD_CMD_PORT_OUT |= _BV(LCD_RW);
 43e:	12 9a       	sbi	0x02, 2	; 2

	LCD_DTA_PORT_DDR &= ~LCD_DTA_BITS;
 440:	91 b1       	in	r25, 0x01	; 1
 442:	9f 70       	andi	r25, 0x0F	; 15
 444:	91 b9       	out	0x01, r25	; 1

	if (rs)
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <LCD_recibirNibble+0x10>
		LCD_CMD_PORT_OUT |= _BV(LCD_RS);
 44a:	11 9a       	sbi	0x02, 1	; 2
 44c:	01 c0       	rjmp	.+2      	; 0x450 <LCD_recibirNibble+0x12>
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
 44e:	11 98       	cbi	0x02, 1	; 2

static inline uint8_t LCD_pulsoEnable(bool lectura){
	
	uint8_t dato;
	
	LCD_CMD_PORT_OUT |= _BV(LCD_E);
 450:	13 9a       	sbi	0x02, 3	; 2
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <LCD_recibirNibble+0x16>
		#endif /* F_CPU > 2000000UL */
		#endif /* F_CPU > 1000000UL */
	#endif /* F_CPU > 4000000UL */

	if(lectura)
		dato = LCD_DTA_PORT_IN & LCD_DTA_BITS;
 458:	80 b1       	in	r24, 0x00	; 0
	else
		dato = 0x00;

	LCD_CMD_PORT_OUT &= ~_BV(LCD_E);
 45a:	13 98       	cbi	0x02, 3	; 2
	else
		LCD_CMD_PORT_OUT &= ~_BV(LCD_RS);
	
	dato = LCD_pulsoEnable(true);

	LCD_DTA_PORT_DDR |= LCD_DTA_BITS;
 45c:	91 b1       	in	r25, 0x01	; 1
 45e:	90 6f       	ori	r25, 0xF0	; 240
 460:	91 b9       	out	0x01, r25	; 1
	LCD_CMD_PORT_OUT &= ~_BV(LCD_RW);
 462:	12 98       	cbi	0x02, 2	; 2

	return (dato & LCD_DTA_BITS)>>LCD_D4;


}
 464:	82 95       	swap	r24
 466:	8f 70       	andi	r24, 0x0F	; 15
 468:	08 95       	ret

0000046a <LCD_recibirByte>:
 * @PRE: Los parametros se encuentran bien definidos
 * @POS: Se reciben dos nibbles para completar el dato/instruccion proveniente del controlador del LCD
 * @RETURN: Void
 */

uint8_t LCD_recibirByte(uint8_t rs){
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	18 2f       	mov	r17, r24
	
	uint8_t dato;
	dato = LCD_recibirNibble(rs) << 4;
 470:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_recibirNibble>
 474:	08 2f       	mov	r16, r24
 476:	02 95       	swap	r16
 478:	00 7f       	andi	r16, 0xF0	; 240
	dato |= LCD_recibirNibble(rs);
 47a:	81 2f       	mov	r24, r17
 47c:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_recibirNibble>
	return dato;

}
 480:	80 2b       	or	r24, r16
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <LCD_esperarListo>:
/**
 * Este metodo genera una espera activa mientras se encuentra activada la bandera de ocupado
 * del controlador del LCD.
 */
void LCD_esperarListo(void){
	while( LCD_recibirByte(0) & LCD_BUSYFLAG);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_recibirByte>
 48e:	87 fd       	sbrc	r24, 7
 490:	fb cf       	rjmp	.-10     	; 0x488 <LCD_esperarListo>
}
 492:	08 95       	ret

00000494 <LCD_init>:
 * @PRE: El voltaje ya se debe haber estabilizado tanto en el micro como en el LCD
 * @POS: Se inicializa el protocolo de comunicacion con el controlador del LCD con 
 *		 las opciones escogidas en el archivo 'defines.h'
 * @RETURN: Void
 */
void LCD_init(void){
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
	
	LCD_CMD_PORT_DDR |= _BV(LCD_RS)|_BV(LCD_RW)|_BV(LCD_E);
 498:	81 b1       	in	r24, 0x01	; 1
 49a:	8e 60       	ori	r24, 0x0E	; 14
 49c:	81 b9       	out	0x01, r24	; 1
	LCD_DTA_PORT_DDR |= LCD_DTA_BITS;
 49e:	81 b1       	in	r24, 0x01	; 1
 4a0:	80 6f       	ori	r24, 0xF0	; 240
 4a2:	81 b9       	out	0x01, r24	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a4:	80 e4       	ldi	r24, 0x40	; 64
 4a6:	9c e9       	ldi	r25, 0x9C	; 156
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_init+0x14>
	_delay_ms(20);

	// Se realiza una inicializacion por instrucciones para evitar problemas si
	// la fuente no es capaz de generar una inicializacion por reset automatico

	LCD_enviarNibble(0x03, 0);
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_enviarNibble>
 4b4:	80 e1       	ldi	r24, 0x10	; 16
 4b6:	97 e2       	ldi	r25, 0x27	; 39
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_init+0x24>
	_delay_ms(5);
	LCD_enviarNibble(0x03, 0);
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_enviarNibble>
 4c4:	08 ee       	ldi	r16, 0xE8	; 232
 4c6:	13 e0       	ldi	r17, 0x03	; 3
 4c8:	c8 01       	movw	r24, r16
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_init+0x36>
	_delay_ms(0.5);
	LCD_enviarNibble(0x03, 0);
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_enviarNibble>
 4d6:	c8 01       	movw	r24, r16
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_init+0x44>
	_delay_ms(0.5);


	LCD_enviarNibble( LCD_FNSET>>4, 0);
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_enviarNibble>
	LCD_esperarListo();
 4e4:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarByte( LCD_FNSET, 0);
 4e8:	88 e2       	ldi	r24, 0x28	; 40
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
	LCD_esperarListo();
 4f0:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarByte( LCD_DSPCTR, 0);
 4f4:	8c e0       	ldi	r24, 0x0C	; 12
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
	LCD_esperarListo();
 4fc:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarByte( LCD_ENTMOD, 0);
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
	LCD_esperarListo();
 508:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarByte( 0x01, 0);
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
	LCD_esperarListo();
 514:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>
	LCD_enviarByte( 0x02, 0);
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_enviarByte>
	LCD_esperarListo();
 520:	0e 94 44 02 	call	0x488	; 0x488 <LCD_esperarListo>

}
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <USART_init>:
 * @RETURN: Void
 */
void USART_init(uint8_t puerto, uint8_t as){

	// Nos aseguramos que la USART se encuentre inactiva
	UCSR0B = 0x00;
 52a:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0A = 0x00;
 52e:	10 92 c0 00 	sts	0x00C0, r1


}
 532:	08 95       	ret

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
